% Encoding: UTF-8

@InProceedings{popl-roles,
  Title                    = {Generative type abstraction and type-level computation},
  Author                   = {Stephanie Weirich and
 Dimitrios Vytiniotis and
 Simon {Peyton Jones} and
 Steve Zdancewic},
  Booktitle                = {POPL},
  Year                     = {2011},
  Publisher                = {ACM},

  Bibsource                = {DBLP, http://dblp.uni-trier.de},
  Crossref                 = {DBLP:conf/popl/2011},
  Ee                       = {http://doi.acm.org/10.1145/1926385.1926411},
  Owner                    = {rae},
  Timestamp                = {2015.05.07}
}

@InProceedings{type-classes,
  author    = {Philip Wadler and Stephen Blott},
  booktitle = {POPL},
  title     = {How to Make ad-hoc Polymorphism Less ad-hoc},
  year      = {1989},
  pages     = {60-76},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  ee        = {http://doi.acm.org/10.1145/75277.75283},
  owner     = {rae},
  timestamp = {2015.05.08},
}

@techreport{tate2008a,
author = {Tate, Ross and Chen, Juan and Hawblitzel, Chris},
title = {A Flexible Framework for Type Inference with Existential Quantification},
year = {2008},
month = {December},
abstract = {Preserving types through compilation guarantees safety of the compiler output without trusting the compiler: the compiler output is annotated with types and can be verified. Type inference can make this technique more practical by inferring most of the needed type information. Existential types, however, are difficult to infer, especially those with implicit pack and unpack operations.
This paper proposes a framework for type inference with existential quantification and demonstrates the framework on a small object-oriented typed assembly language. The framework is flexible enough to support language features such as downward cast, arrays, and interfaces. The framework is based on category theory, the first such application of category theory to type inference to the best of our knowledge.},
publisher = {Microsoft},
url = {https://www.microsoft.com/en-us/research/publication/a-flexible-framework-for-type-inference-with-existential-quantification/},
number = {MSR-TR-2008-184},
}

@InProceedings{kato,
author="Kato, Yuki
and Nakazawa, Koji",
editor="Escobar, Santiago",
title="Type Checking and Inference Are Equivalent in Lambda Calculi with Existential Types",
booktitle="Functional and Constraint Logic Programming",
year="2010",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="96--110",
abstract="This paper shows that type-checking and type-inference problems are equivalent in domain-free lambda calculi with existential types, that is, type-checking problem is Turing reducible to type-inference problem and vice versa. In this paper, the equivalence is proved for two variants of domain-free lambda calculi with existential types: one is an implication and existence fragment, and the other is a negation, conjunction and existence fragment. This result gives another proof of undecidability of type inference in the domain-free calculi with existence.",
isbn="978-3-642-11999-6"
}



@Unpublished{leijen:first-class-existentials,
  author =       {Daan Leijen},
  title =        {First-class polymorphism with existential types},
  note =         {Unpublished},
  year =      2006}

@PhdThesis{perry:phd,
  author =       {Nigel Perry},
  title =        {The implementation of practical functional programming languages},
  school =       {Imperial College of Science, Technology and Medicine,
University of London},
  year =         1991}

@article{laufer1994polymorphic,
  title={Polymorphic type inference and abstract data types},
  author={L{\"a}ufer, Konstantin and Odersky, Martin},
  journal={ACM Transactions on Programming Languages and Systems (TOPLAS)},
  volume={16},
  number={5},
  pages={1411--1430},
  year={1994},
  publisher={ACM New York, NY, USA}
}


@inproceedings{macqueen1986using,
  title={Using dependent types to express modular structure},
  author={MacQueen, David B},
  booktitle={Proceedings of the 13th ACM SIGACT-SIGPLAN symposium on Principles of programming languages},
  pages={277--286},
  year={1986}
}

@inproceedings{cardelli1990abstract,
  title={Abstract types and the dot notation},
  author={Cardelli, Luca and Leroy, Xavier},
  booktitle={IFIP TC2 working conference on programming concepts and methods},
  pages={479--504},
  year={1990},
  organization={North-Holland}
}

@article{mitchell1988abstract,
  title={Abstract types have existential type},
  author={Mitchell, John C and Plotkin, Gordon D},
  journal={ACM Transactions on Programming Languages and Systems (TOPLAS)},
  volume={10},
  number={3},
  pages={470--502},
  year={1988},
  publisher={ACM New York, NY, USA}
}

@article{rossberg2014f,
  title={F-ing modules},
  author={Rossberg, Andreas and Russo, Claudio and Dreyer, Derek},
  journal={Journal of functional programming},
  volume={24},
  number={5},
  pages={529--607},
  year={2014},
  publisher={Cambridge University Press}
}

@inproceedings{pj-meijer:heaven-and-hell,
  topic = "ffi",
  author = "S Finne and D Leijen and E Meijer and SL {Peyton~Jones}",
  title = "Calling {Hell} from {Heaven} and {Heaven} from {Hell}",
  booktitle = 	 "{ACM SIGPLAN International Conference on Functional Programming (ICFP'99)}",
  address = 	 "Paris",
  publisher = "ACM",
  year = 	 1999,
  month = 	 sep,
  pages = "114-125",
  keywords = "phantom types"
}

@InBook{augustsson-compiling-pattern-matching,
  Title                    = {Compiling pattern matching},
  Author                   = {Augustsson, Lennart},
  Editor                   = {Jouannaud, Jean-Pierre},
  Pages                    = {368--381},
  Publisher                = {Springer Berlin Heidelberg},
  Year                     = {1985},

  Address                  = {Berlin, Heidelberg},

  Booktitle                = {Functional Programming Languages and Computer Architecture: Nancy, France, September 16--19, 1985},
  Doi                      = {10.1007/3-540-15975-4_48},
  ISBN                     = {978-3-540-39677-2},
  Url                      = {http://dx.doi.org/10.1007/3-540-15975-4_48}
}

@InProceedings{cayenne,
  Title                    = {Cayenne---a language with dependent types},
  Author                   = {Augustsson, Lennart},
  Booktitle                = {Proc. ACM SIGPLAN International Conference on Functional Programming},
  Year                     = {1998},
  Pages                    = {239--250},
  Publisher                = {ACM},
  Series                   = {ICFP '98},

  Keywords                 = {dependent types, language design, module systems, type systems},
  Location                 = {Baltimore, Maryland, United States},
  Numpages                 = {12},
  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@PhdThesis{clash,
  Title                    = {Digital Circuits in {C{\greektext l}ash}: Functional Specification and Type-Directed Synthesis},
  Author                   = {Christiaan P. R. Baaij},
  School                   = {University of Twente},
  Year                     = {2015},

  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@InProceedings{typing-dynamic-typing,
  Title                    = {Typing dynamic typing},
  Author                   = {Baars, Arthur I. and Swierstra, S. Doaitse},
  Booktitle                = {Proc. 7th ACM SIGPLAN International Conference on Functional Programming},
  Year                     = {2002},
  Pages                    = {157--166},
  Publisher                = {ACM},
  Series                   = {ICFP '02},

  Keywords                 = {Haskell, Leibnitz' rule, coercions, dynamic typing, quantified types, static typing, type equality, typed interpreters},
  Location                 = {Pittsburgh, PA, USA},
  Numpages                 = {10},
  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@InProceedings{generics-with-closed-type-families,
  Title                    = {Composing and Decomposing Data Types: A Closed Type Families Implementation of Data Types \`a La Carte},
  Author                   = {Bahr, Patrick},
  Booktitle                = {Workshop on Generic Programming},
  Year                     = {2014},
  Publisher                = {ACM}
}

@Article{barendregt-lambda-cube,
  Title                    = {Introduction to generalized type systems},
  Author                   = {Barendregt, Henk},
  Journal                  = {J. Funct. Program.},
  Year                     = {1991},
  Number                   = {2},
  Pages                    = {125--154},
  Volume                   = {1}
}

@InProceedings{bernardy-dependent-types,
  Title                    = {Parametricity and dependent types},
  Author                   = {Bernardy, Jean-Philippe and Jansson, Patrik and Paterson, Ross},
  Booktitle                = {Proc. 15th ACM SIGPLAN International Conference on Functional Programming},
  Year                     = {2010},
  Pages                    = {345--356},
  Publisher                = {ACM},
  Series                   = {ICFP '10},

  Keywords                 = {abstraction theorem, free theorems, pure type system},
  Location                 = {Baltimore, Maryland, USA},
  Numpages                 = {12},
  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@Article{bird-debruijn,
  Title                    = {{de Bruijn notation as a nested datatype}},
  Author                   = {Bird, Richard S. and Paterson, Ross},
  Journal                  = {J. Funct. Program.},
  Year                     = {1999},

  Month                    = jan,
  Number                   = {1},
  Pages                    = {77--91},
  Volume                   = {9},

  Address                  = {New York, NY, USA},
  Issue_date               = {January 1999},
  Numpages                 = {15},
  Owner                    = {rae},
  Publisher                = {Cambridge University Press},
  Timestamp                = {2015.05.08}
}

@InProceedings{algebraic-effects,
  Title                    = {Programming and Reasoning with Algebraic Effects and Dependent Types},
  Author                   = {Brady, Edwin},
  Booktitle                = {International Conference on Functional Programming},
  Year                     = {2013},
  Publisher                = {ACM}
}

@Article{idris,
  Title                    = {Idris, a general-purpose dependently typed programming language: {D}esign and implementation},
  Author                   = {Brady,Edwin},
  Journal                  = {J.~Funct.~Prog.},
  Year                     = {2013},
  Volume                   = {23},

  Owner                    = {rae},
  Timestamp                = {2015.05.07}
}

@InCollection{erasing-indices,
  Title                    = {Inductive Families Need Not Store Their Indices},
  Author                   = {Brady, Edwin and McBride, Conor and McKinna, James},
  Booktitle                = {Types for Proofs and Programs},
  Year                     = {2004},
  Editor                   = {Berardi, Stefano and Coppo, Mario and Damiani, Ferruccio},
  Series                   = {Lecture Notes in Computer Science},
  Volume                   = {3085}
}

@Article{safe-coercions-jfp,
  author    = {Breitner, Joachim and Eisenberg, Richard A. and Peyton Jones, Simon and Weirich, Stephanie},
  title     = {Safe Zero-cost Coercions for {H}askell},
  journal   = {J. Funct. Program.},
  year      = {2016},
  volume    = {26},
  pages     = {1--79},
  owner     = {rae},
  timestamp = {2016.06.27},
}

@InProceedings{safe-coercions,
  Title                    = {Safe Zero-cost Coercions for {H}askell},
  Author                   = {Breitner, Joachim and Eisenberg, Richard A. and Peyton Jones, Simon and Weirich, Stephanie},
  Booktitle                = {International Conference on Functional Programming},
  Year                     = {2014},
  Publisher                = {ACM},
  Series                   = {ICFP '14},

  Acmid                    = {2628141},
  Keywords                 = {coercion, haskell, newtype deriving, type class},
  Location                 = {Gothenburg, Sweden},
  Owner                    = {rae},
  Timestamp                = {2015.05.07}
}

@TechReport{safe-coercions-extended,
  Title                    = {Safe Zero-cost Coercions for {H}askell (extended version)},
  Author                   = {Breitner, Joachim and Eisenberg, Richard A. and {Peyton Jones}, Simon and Weirich, Stephanie},
  Institution              = {University of Pennsylvania},
  Year                     = {2014},
  Number                   = {MS-CIS-14-07},

  Owner                    = {rae},
  Timestamp                = {2015.05.07}
}

@InProceedings{haskelldb,
  Title                    = {Student paper: {HaskellDB} improved},
  Author                   = {Bringert, Bj\"{o}rn and H\"{o}ckersten, Anders and Andersson, Conny and Andersson, Martin and Bergman, Mary and Blomqvist, Victor and Martin, Torbj\"{o}rn},
  Booktitle                = {Proc. 2004 ACM SIGPLAN workshop on Haskell},
  Year                     = {2004},
  Pages                    = {108--115},
  Publisher                = {ACM},
  Series                   = {Haskell '04},

  Keywords                 = {SQL, databases, extensible records, haskell},
  Location                 = {Snowbird, Utah, USA},
  Numpages                 = {8},
  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@Article{debruijn,
  author    = {de Bruijn, Nicolaas Govert},
  journal   = {Indagationes Mathematicae (Proceedings)},
  title     = {Lambda calculus notation with nameless dummies, a tool for automatic formula manipulation, with application to the Church-Rosser theorem},
  year      = {1972},
  issn      = {1385-7258},
  number    = {5},
  pages     = {381-392},
  volume    = {75},
  doi       = {10.1016/1385-7258(72)90034-0},
  groups    = {rae:6},
  owner     = {rae},
  publisher = {Elsevier BV},
  timestamp = {2015.05.08},
  url       = {http://dx.doi.org/10.1016/1385-7258(72)90034-0},
}

@InProceedings{hlio,
  Title                    = {{HLIO}: Mixing Static and Dynamic Typing for Information-Flow Control in {Haskell}},
  Author                   = {Buiras, Pablo and Vytiniotis, Dimitrios and Russo, Alejandro},
  Booktitle                = {International Conference on Functional Programming},
  Year                     = {2015},
  Publisher                = {ACM},
  Series                   = {ICFP '15},

  Location                 = {Vancouver, British Columbia, Canada}
}

@Article{finally-tagless,
  Title                    = {Finally tagless, partially evaluated: Tagless staged
 interpreters for simpler typed languages},
  Author                   = {Carette, Jacques and Kiselyov, Oleg and Shan,
 Chung-chieh},
  Journal                  = {J. Funct. Program.},
  Year                     = {2009},

  Month                    = sep,
  Number                   = {5},
  Pages                    = {509--543},
  Volume                   = {19},

  Address                  = {New York, NY, USA},
  Issue_date               = {September 2009},
  Numpages                 = {35},
  Owner                    = {rae},
  Publisher                = {Cambridge University Press},
  Timestamp                = {2015.05.08}
}

@InProceedings{trellys,
  Title                    = {Step-Indexed Normalization for a Language with General
 Recursion},
  Author                   = {Casinghino, Chris and Sj\"oberg, Vilhelm and Weirich,
 Stephanie},
  Booktitle                = {{\rm Proc. 4th Workshop on} Mathematically Structured
 Functional Programming, {\rm Tallinn, Estonia}},
  Year                     = {2012},
  Pages                    = {25-39},

  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@InProceedings{chak1,
  Title                    = {Associated Type Synonyms},
  Author                   = {Chakravarty, Manuel M. T. and Keller, Gabriele and Peyon Jones, Simon},
  Booktitle                = {International Conference on Functional Programming},
  Year                     = {2005},
  Publisher                = {ACM},
  Series                   = {ICFP '05},

  Acmid                    = {1086397},
  Keywords                 = {associated types, generic programming, type classes, type functions, type inference},
  Location                 = {Tallinn, Estonia},
  Owner                    = {rae},
  Timestamp                = {2015.05.07}
}

@InProceedings{chak2,
  Title                    = {Associated Types with Class},
  Author                   = {Manuel M. T. Chakravarty and Gabriele Keller and Simon {Peyton Jones} and Simon Marlow},
  Booktitle                = {ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
  Year                     = {2005},

  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@InProceedings{xi-ats,
  Title                    = {Combining programming with theorem proving},
  Author                   = {Chen, Chiyan and Xi, Hongwei},
  Booktitle                = {Proc. 10th ACM SIGPLAN International Conference on Functional Programming},
  Year                     = {2005},
  Pages                    = {66--77},
  Publisher                = {ACM},
  Series                   = {ICFP '05},

  Keywords                 = {ATS, applied type system, dependent types, proof erasure, theorem proving},
  Location                 = {Tallinn, Estonia},
  Numpages                 = {12},
  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@TechReport{cheney-gadts,
  Title                    = {First-Class Phantom Types},
  Author                   = {Cheney, James and Hinze, Ralf},
  Institution              = {Cornell University},
  Year                     = {2003},

  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@InProceedings{lightweight-generics,
  Title                    = {A lightweight implementation of generics and dynamics},
  Author                   = {Cheney, James and Hinze, Ralf},
  Booktitle                = {Proc. 2002 ACM SIGPLAN workshop on Haskell},
  Year                     = {2002},
  Pages                    = {90--104},
  Publisher                = {ACM},
  Series                   = {Haskell '02},

  Keywords                 = {dynamic typing, generic programming, type representations},
  Location                 = {Pittsburgh, Pennsylvania},
  Numpages                 = {15},
  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@InCollection{subtyping-without-distributivity,
  Title                    = {Polymorphic subtyping without distributivity},
  Author                   = {Chrz\k{a}szcz, Jacek},
  Booktitle                = {Mathematical Foundations of Computer Science 1998},
  Publisher                = {Springer Berlin Heidelberg},
  Year                     = {1998},
  Editor                   = {Brim, Lubo\v{s} and Gruska, Jozef and Zlatu\v{s}ka, Ji\v{r}\'{\i}},
  Pages                    = {346-355},
  Series                   = {Lecture Notes in Computer Science},
  Volume                   = {1450},

  Language                 = {English}
}

@InProceedings{mini-ml,
  Title                    = {A Simple Applicative Language: {Mini-ML}},
  Author                   = {Cl{\'e}ment, Dominique and Despeyroux, Thierry and Kahn, Gilles and Despeyroux, Jo\"{e}lle},
  Booktitle                = {Conference on LISP and Functional Programming},
  Year                     = {1986},
  Publisher                = {ACM},
  Series                   = {LFP '86},

  Location                 = {Cambridge, Massachusetts, USA}
}

@InCollection{low-level-dependent-types,
  Title                    = {Dependent types for low-level programming},
  Author                   = {Condit, Jeremy and Harren, Matthew and Anderson, Zachary and Gay, David and Necula, George C.},
  Booktitle                = {Proc. 16th European conference on Programming},
  Year                     = {2007},

  Address                  = {Berlin, Heidelberg},
  Pages                    = {520--535},
  Series                   = {ESOP'07},

  Location                 = {Braga, Portugal},
  Numpages                 = {16},
  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@Manual{coq,
  Title                    = {The {C}oq proof assistant reference manual},
  Author                   = {{Coq development team}},
  Note                     = {Version 8.0},
  Organization             = {LogiCal Project},
  Year                     = {2004},

  Owner                    = {rae},
  Timestamp                = {2015.05.08},
  Url                      = {http://coq.inria.fr}
}

@Article{coquand-cc,
  Title                    = {The calculus of constructions},
  Author                   = {Thierry Coquand and G\'erard Huet},
  Journal                  = {Information and Computation},
  Year                     = {1988},
  Number                   = {2},
  Pages                    = {95 - 120},
  Volume                   = {76},

  Doi                      = {http://dx.doi.org/10.1016/0890-5401(88)90005-3},
  ISSN                     = {0890-5401},
  Url                      = {http://www.sciencedirect.com/science/article/pii/0890540188900053}
}

@InProceedings{weirich:popcron,
  Title                    = {Resource bound certification},
  Author                   = {Crary, Karl and Weirich, Stephnie},
  Booktitle                = {Proc. 27th ACM SIGPLAN-SIGACT symposium on Principles of programming languages},
  Year                     = {2000},
  Pages                    = {184--198},
  Publisher                = {ACM},
  Series                   = {POPL '00},

  Location                 = {Boston, MA, USA},
  Numpages                 = {15},
  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@MastersThesis{dagit-thesis,
  Title                    = {{Type-correct changes -- a safe approach to version control implementation}},
  Author                   = {Dagit, Jason},
  School                   = {Oregon State University},
  Year                     = {2009},
  Month                    = mar,

  Citeulike-article-id     = {7293491},
  Day                      = {20},
  Key                      = {dagit2009:thesis},
  Keywords                 = {darcs, gadt, haskell, patches},
  Owner                    = {rae},
  Posted-at                = {2010-06-11 22:20:16},
  Priority                 = {2},
  Timestamp                = {2015.05.08}
}

@PhdThesis{damas-thesis,
  Title                    = {Type Assignment in Programming Languages},
  Author                   = {Luis Damas},
  School                   = {University of Edinburgh},
  Year                     = {1985},

  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@InProceedings{damas-milner,
  Title                    = {Principal Type-schemes for Functional Programs},
  Author                   = {Damas, Luis and Milner, Robin},
  Booktitle                = {Symposium on Principles of Programming Languages},
  Year                     = {1982},
  Publisher                = {ACM},
  Series                   = {POPL '82},

  Location                 = {Albuquerque, New Mexico}
}

@InProceedings{davies-intersection-types,
  Title                    = {Intersection Types and Computational Effects},
  Author                   = {Davies, Rowan and Pfenning, Frank},
  Booktitle                = {Proceedings of the Fifth ACM SIGPLAN International Conference on Functional Programming},
  Year                     = {2000},

  Address                  = {New York, NY, USA},
  Pages                    = {198--208},
  Publisher                = {ACM},
  Series                   = {ICFP '00},

  Acmid                    = {351259},
  Doi                      = {10.1145/351240.351259},
  ISBN                     = {1-58113-202-6},
  Numpages                 = {11},
  Url                      = {http://doi.acm.org/10.1145/351240.351259}
}

@InProceedings{ironclad-cpp,
  Title                    = {Ironclad {C++}: A Library-augmented Type-safe Subset of {C++}},
  Author                   = {DeLozier, Christian and Eisenberg, Richard A. and Nagarakatte, Santosh and Osera, Peter-Michael and Martin, Milo M. K. and Zdancewic, Steve},
  Booktitle                = {International Conference on Object Oriented Programming Systems Languages \& Applications},
  Year                     = {2013},
  Publisher                = {ACM},
  Series                   = {OOPSLA '13}
}

@InProceedings{automating-transformations-scala,
  Title                    = {Automating Ad hoc Data Representation Transformations},
  Author                   = {Ureche, Vlad and Biboudis, Aggelos and Smaragdakis, Yannis and Odersky, Martin},
  Booktitle                = {International Conference on Object Oriented Programming Systems Languages \& Applications},
  Year                     = {2015},
  Publisher                = {ACM},
  Series                   = {OOPSLA '15}
}

@InProceedings{abductive-error-diagnosis,
  Title                    = {Automated Error Diagnosis Using Abductive Inference},
  Author                   = {Dillig, Isil and Dillig, Thomas and Aiken, Alex},
  Booktitle                = {Conference on Programming Language Design and Implementation},
  Year                     = {2012},
  Publisher                = {ACM},
  Series                   = {PLDI '12}
}

@InProceedings{van-doorn-explicit-convertibility-proofs,
  Title                    = {Explicit Convertibility Proofs in Pure Type Systems},
  Author                   = {van Doorn, Floris and Geuvers, Herman and Wiedijk, Freek},
  Booktitle                = {Proceedings of the Eighth ACM SIGPLAN International Workshop on Logical Frameworks and Meta-languages: Theory and Practice},
  Year                     = {2013},

  Address                  = {New York, NY, USA},
  Pages                    = {25--36},
  Publisher                = {ACM},
  Series                   = {LFMTP '13},

  Acmid                    = {2503890},
  Doi                      = {10.1145/2503887.2503890},
  ISBN                     = {978-1-4503-2382-6},
  Keywords                 = {conversion rule, convertibility proofs, coq, formalisation, pure type systems, type theory},
  Location                 = {Boston, Massachusetts, USA},
  Numpages                 = {12},
  Url                      = {http://doi.acm.org/10.1145/2503887.2503890}
}

@InProceedings{type-schemes-modules,
  Title                    = {Principal Type Schemes for Modular Programs},
  Author                   = {Dreyer, Derek and Blume, Matthias},
  Booktitle                = {Proceedings of the 16th European Conference on Programming},
  Year                     = {2007},
  Publisher                = {Springer-Verlag},
  Series                   = {ESOP'07}
}

@InProceedings{modular-type-classes,
  Title                    = {Modular type classes},
  Author                   = {Dreyer, Derek and Harper, Robert and Chakravarty, Manuel M. T. and Keller, Gabriele},
  Booktitle                = {Proc. 34th annual ACM SIGPLAN-SIGACT symposium on Principles of Programming Languages},
  Year                     = {2007},
  Pages                    = {63--70},
  Publisher                = {ACM},
  Series                   = {POPL '07},

  Keywords                 = {modules, type classes, type inference, type systems},
  Location                 = {Nice, France},
  Numpages                 = {8},
  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@Article{bidirectional-existentials,
  author     = {Dunfield, Jana and Krishnaswami, Neelakantan R.},
  journal    = {Proc. ACM Program. Lang.},
  title      = {Sound and Complete Bidirectional Typechecking for Higher-Rank Polymorphism with Existentials and Indexed Types},
  year       = {2019},
  month      = jan,
  number     = {POPL},
  volume     = {3},
  abstract   = {Bidirectional typechecking, in which terms either synthesize a type or are checked against a known type, has become popular for its applicability to a variety of type systems, its error reporting, and its ease of implementation. Following principles from proof theory, bidirectional typing can be applied to many type constructs. The principles underlying a bidirectional approach to indexed types (generalized algebraic datatypes) are less clear. Building on proof-theoretic treatments of equality, we give a declarative specification of typing based on focalization. This approach permits declarative rules for coverage of pattern matching, as well as support for first-class existential types using a focalized subtyping judgment. We use refinement types to avoid explicitly passing equality proofs in our term syntax, making our calculus similar to languages such as Haskell and OCaml. We also extend the declarative specification with an explicit rules for deducing when a type is principal, permitting us to give a complete declarative specification for a rich type system with significant type inference. We also give a set of algorithmic typing rules, and prove that it is sound and complete with respect to the declarative system. The proof requires a number of technical innovations, including proving soundness and completeness in a mutually recursive fashion.},
  address    = {New York, NY, USA},
  articleno  = {9},
  doi        = {10.1145/3290322},
  issue_date = {January 2019},
  keywords   = {equality types, GADTs, bidirectional typechecking, existential types, higher-rank polymorphism, indexed types},
  numpages   = {28},
  publisher  = {Association for Computing Machinery},
  url        = {https://doi.org/10.1145/3290322},
}

@InProceedings{simple-bidirectional,
  Title                    = {Complete and Easy Bidirectional Typechecking for Higher-rank Polymorphism},
  Author                   = {Dunfield, Jana and Krishnaswami, Neelakantan R.},
  Booktitle                = {International Conference on Functional Programming},
  Year                     = {2013},
  Publisher                = {ACM},
  Series                   = {ICFP '13}
}

@InProceedings{tridirectional-typechecking,
  Title                    = {Tridirectional Typechecking},
  Author                   = {Dunfield, Jana and Pfenning, Frank},
  Booktitle                = {Proceedings of the 31st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
  Year                     = {2004},

  Address                  = {New York, NY, USA},
  Pages                    = {281--292},
  Publisher                = {ACM},
  Series                   = {POPL '04},

  Acmid                    = {964025},
  Doi                      = {10.1145/964001.964025},
  ISBN                     = {1-58113-729-X},
  Keywords                 = {dependent types, intersection types, type refinements, union types},
  Location                 = {Venice, Italy},
  Numpages                 = {12},
  Url                      = {http://doi.acm.org/10.1145/964001.964025}
}

@TechReport{ghc-core-spec,
  Title                    = {System {FC}, as implemented in {GHC}},
  Author                   = {Eisenberg, Richard A.},
  Institution              = {University of Pennsylvania},
  Year                     = {2015},
  Number                   = {MS-CIS-15-09},

  Owner                    = {rae},
  Timestamp                = {2016.06.28},
  Url                      = {https://github.com/ghc/ghc/blob/master/docs/core-spec/core-spec.pdf}
}

@TechReport{overabundance-of-equalities,
  Title                    = {An Overabundance of Equality: Implementing Kind Equalities into Haskell},
  Author                   = {Eisenberg, Richard A.},
  Institution              = {University of Pennsylvania},
  Year                     = {2015},
  Number                   = {MS-CIS-15-10},

  Owner                    = {rae},
  Timestamp                = {2015.05.27},
  Url                      = {http://www.cis.upenn.edu/~eir/papers/2015/equalities/equalities.pdf}
}

@InProceedings{promoting-type-families,
  Title                    = {Promoting Functions to Type Families in {H}askell},
  Author                   = {Richard A. Eisenberg and Jan Stolarek},
  Booktitle                = {ACM SIGPLAN Haskell Symposium},
  Year                     = {2014},

  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@TechReport{promoting-type-families-extended,
  Title                    = {Promoting Functions to Type Families in {H}askell (extended version)},
  Author                   = {Richard A. Eisenberg and Jan Stolarek},
  Institution              = {University of Pennsylvania},
  Year                     = {2014},
  Number                   = {MS-CIS-14-09},

  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@InProceedings{closed-type-families,
  Title                    = {Closed Type Families with Overlapping Equations},
  Author                   = {Eisenberg, Richard A. and Vytiniotis, Dimitrios and Peyton Jones, Simon and Weirich, Stephanie},
  Booktitle                = {Principles of Programming Languages},
  Year                     = {2014},
  Publisher                = {ACM},
  Series                   = {POPL '14},

  Acmid                    = {2535856},
  Keywords                 = {haskell, system fc, type families, type-level computation},
  Location                 = {San Diego, California, USA},
  Owner                    = {rae},
  Timestamp                = {2015.05.07}
}

@TechReport{closed-type-families-extended,
  Title                    = {Closed Type Families with Overlapping Equations (Extended version)},
  Author                   = {Richard A. Eisenberg and Dimitrios Vytiniotis and Simon {Peyton Jones} and Stephanie Weirich},
  Institution              = {University of Pennsylvania},
  Year                     = {2013},
  Number                   = {MS-CIS-13-10},

  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@InProceedings{singletons,
  Title                    = {Dependently Typed Programming with Singletons},
  Author                   = {Richard A. Eisenberg and Stephanie Weirich},
  Booktitle                = {ACM SIGPLAN Haskell Symposium},
  Year                     = {2012},

  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@InProceedings{visible-type-application,
  Title                    = {Visible Type Application},
  Author                   = {Richard A. Eisenberg and Stephanie Weirich and Hamidhasan Ahmed},
  Booktitle                = {European Symposium on Programming (ESOP)},
  Year                     = {2016},
  Publisher                = {Springer-Verlag},
  Series                   = {LNCS},

  Owner                    = {rae},
  Timestamp                = {2016.01.24}
}

@InProceedings{cloud-haskell,
  Title                    = {Towards Haskell in the Cloud},
  Author                   = {Epstein, Jeff and Black, Andrew P. and Peyton Jones, Simon},
  Booktitle                = {Haskell Symposium},
  Year                     = {2011},
  Publisher                = {ACM},

  Acmid                    = {2034690},
  Keywords                 = {erlang, haskell, message-passing},
  Location                 = {Tokyo, Japan},
  Owner                    = {rae},
  Timestamp                = {2015.05.07}
}

@Article{haskell-semantics,
  Title                    = {A static semantics for {H}askell},
  Author                   = {Karl-Filip Fax{\'e}n},
  Journal                  = {Journal of Functional Programming},
  Year                     = {2002},

  Month                    = jul,
  Number                   = {4-5},
  Volume                   = {12},

  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@Article{lambda-lifting-proof,
  Title                    = {Specification and Correctness of Lambda Lifting},
  Author                   = {Adam Fischbach and John Hannan},
  Journal                  = {Journal of Functional Programming},
  Year                     = {2003},

  Month                    = may,
  Number                   = {3},
  Volume                   = {13},

  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@Article{do-we-need-dependent-types,
  Title                    = {Do we need dependent types?},
  Author                   = {Fridlender, Daniel and Indrika, Mia},
  Journal                  = {J. Funct. Program.},
  Year                     = {2000},

  Month                    = jul,
  Number                   = {4},
  Pages                    = {409--415},
  Volume                   = {10},

  Address                  = {New York, NY, USA},
  Issue_date               = {July 2000},
  Numpages                 = {7},
  Owner                    = {rae},
  Publisher                = {Cambridge University Press},
  Timestamp                = {2015.05.08}
}

@Misc{garrigue-injectivity,
  Title                    = {On variance, injectivity, and abstraction},

  Author                   = {Jacques Garrigue},
  HowPublished             = {OCaml Meeting, Boston.},
  Month                    = sep,
  Year                     = {2013},

  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@Article{haskell-termination-checker,
  Title                    = {Automated termination proofs for {H}askell by term
 rewriting},
  Author                   = {Giesl, J\"{u}rgen and Raffelsieper, Matthias and
 Schneider-Kamp, Peter and Swiderski, Stephan and Thiemann,
 Ren{\'e}},
  Journal                  = {ACM Trans. Program. Lang. Syst.},
  Year                     = {2011},

  Month                    = feb,
  Number                   = {2},
  Pages                    = {7:1--7:39},
  Volume                   = {33},

  Address                  = {New York, NY, USA},
  Articleno                = {7},
  Issue_date               = {January 2011},
  Keywords                 = {Functional programming, Haskell, dependency pairs, term
 rewriting, termination analysis},
  Numpages                 = {39},
  Owner                    = {rae},
  Publisher                = {ACM},
  Timestamp                = {2015.05.08}
}

@InProceedings{list-fusion,
  Title                    = {A Short Cut to Deforestation},
  Author                   = {Gill, Andrew and Launchbury, John and {Peyton Jones}, Simon},
  Booktitle                = {Proceedings of the Conference on Functional Programming Languages and Computer Architecture},
  Year                     = {1993},

  Address                  = {New York, NY, USA},
  Pages                    = {223--232},
  Publisher                = {ACM},
  Series                   = {FPCA '93},

  Acmid                    = {165214},
  Doi                      = {10.1145/165180.165214},
  Location                 = {Copenhagen, Denmark},
  Numpages                 = {10},
  Owner                    = {rae},
  Timestamp                = {2015.05.08},
  Url                      = {http://doi.acm.org/10.1145/165180.165214}
}

@InCollection{girard-systemf,
  author    = {Jean-Yves Girard},
  booktitle = {Proceedings of the Second Scandinavian Logic Symposium},
  publisher = {Elsevier},
  title     = {Une Extension De L'Interpretation De {G\"odel} \`a L'Analyse, Et Son Application \`a L'\'Elimination Des Coupures Dans L'Analyse Et La Theorie Des Types},
  year      = {1971},
  editor    = {J.E. Fenstad},
  pages     = {63 - 92},
  series    = {Studies in Logic and the Foundations of Mathematics},
  volume    = {63},
}

@PhdThesis{girard-thesis,
  Title                    = {Interpr\'etation fonctionnelle et \'elimination des coupures
de l'arithm\'etique d'ordre sup\'erieur},
  Author                   = {Jean-Yves Girard},
  School                   = {Universit\'e Paris 7},
  Year                     = {1972},

  Owner                    = {rae},
  Timestamp                = {2015.05.07}
}

@InProceedings{monnier-type-preserving,
  Title                    = {A type-preserving compiler in {H}askell},
  Author                   = {Guillemette, Louis-Julien and Monnier, Stefan},
  Booktitle                = {Proc. 13th ACM SIGPLAN International Conference on Functional Programming},
  Year                     = {2008},
  Pages                    = {75--86},
  Publisher                = {ACM},
  Series                   = {ICFP '08},

  Keywords                 = {compilation, de Bruijn, higher-order abstract syntax, typed assembly language},
  Location                 = {Victoria, BC, Canada},
  Numpages                 = {12},
  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@InProceedings{monnier-vote-for-type-families,
  Title                    = {One Vote for Type Families in {H}askell!},
  Author                   = {Louis-Julien Guillemette and Stefan Monnier},
  Booktitle                = {Proc. 9th Symposium on Trends in Functional
 Programming},
  Year                     = {2008},

  Keywords                 = {haskell, dependent types},
  Location                 = {Nijmegen, The Netherlands},
  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@InProceedings{type-checker-plugins,
  author    = {Gundry, Adam},
  title     = {A Typechecker Plugin for Units of Measure: Domain-specific Constraint Solving in {GHC Haskell}},
  booktitle = {Proceedings of the 2015 ACM SIGPLAN Symposium on Haskell},
  year      = {2015},
  series    = {Haskell '15},
  publisher = {ACM},
  location  = {Vancouver, BC, Canada},
}

@PhdThesis{gundry-thesis,
  Title                    = {Type Inference, {H}askell and Dependent Types},
  Author                   = {Gundry, Adam},
  School                   = {University of Strathclyde},
  Year                     = {2013},

  Owner                    = {rae},
  Timestamp                = {2015.05.07}
}

@Article{type-classes-impl,
  Title                    = {Type Classes in Haskell},
  Author                   = {Hall, Cordelia V. and Hammond, Kevin and Peyton Jones, Simon L. and Wadler, Philip L.},
  Journal                  = {ACM Trans. Program. Lang. Syst.},
  Year                     = {1996},

  Month                    = mar,
  Number                   = {2},
  Volume                   = {18},

  Issue_date               = {March 1996},
  Keywords                 = {Haskell, functional programming, type classes, types},
  Publisher                = {ACM}
}

@InCollection{singletons-original,
  Title                    = {Singleton, Union and Intersection Types for Program Extraction},
  Author                   = {Hayashi, Susumu},
  Booktitle                = {Proc. International Conference on Theoretical Aspects of Computer Software},
  Publisher                = {Springer-Verlag},
  Year                     = {1991},

  Address                  = {London, UK},
  Pages                    = {701--730},
  Series                   = {TACS '91},

  Numpages                 = {30},
  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@InProceedings{helium,
  Title                    = {Helium, for Learning Haskell},
  Author                   = {Heeren, Bastiaan and Leijen, Daan and van IJzendoorn, Arjan},
  Booktitle                = {Workshop on Haskell},
  Year                     = {2003},
  Publisher                = {ACM}
}

@InProceedings{very-dependent-types,
  Title                    = {Formal objects in type theory using very dependent types},
  Author                   = {Hickey, Jason J.},
  Booktitle                = {Foundations of Object Oriented Languages (FOOL '96)},
  Year                     = {1996},

  Owner                    = {rae},
  Timestamp                = {2016.06.28},
  Url                      = {http://www.cis.upenn.edu/~bcpierce/FOOL/FOOL3.html}
}

@Article{hindley,
  Title                    = {The Principal Type-Scheme of an Object in Combinatory Logic},
  Author                   = {Hindley, J. Roger},
  Journal                  = {Transactions of the American Mathematical Society},
  Year                     = {1969},
  Volume                   = {146},

  Publisher                = {American Mathematical Society}
}

@Article{generics-for-the-masses,
  Title                    = {Generics for the masses},
  Author                   = {Hinze, Ralf},
  Journal                  = {J. Funct. Program.},
  Year                     = {2006},

  Month                    = jul,
  Number                   = {4-5},
  Pages                    = {451--483},
  Volume                   = {16},

  Address                  = {New York, NY, USA},
  Issue_date               = {July 2006},
  Numpages                 = {33},
  Owner                    = {rae},
  Publisher                = {Cambridge University Press},
  Timestamp                = {2015.05.08}
}

@InProceedings{hofmann-streicher,
  Title                    = {The groupoid interpretation of type theory},
  Author                   = {Hofmann, Martin and Streicher, Thomas},
  Booktitle                = {Twenty-Five Years of Constructive Type Theory},
  Year                     = {1995},

  Address                  = {Venice, Italy},
  Editor                   = {Sambin, Giovanni and Smith, Jan M.},
  Publisher                = {Oxford University Press},
  Series                   = {Oxford Logic Guides},

  Owner                    = {rae},
  Timestamp                = {2016.06.28}
}

@InProceedings{history-of-haskell,
  Title                    = {A History of Haskell: Being Lazy with Class},
  Author                   = {Hudak, Paul and Hughes, John and Peyton Jones, Simon and Wadler, Philip},
  Booktitle                = {Conference on History of Programming Languages},
  Year                     = {2007},

  Location                 = {San Diego, California}
}

@Article{arrows,
  Title                    = {Generalising Monads to Arrows},
  Author                   = {Hughes, John},
  Journal                  = {Sci. Comput. Program.},
  Year                     = {2000},

  Month                    = may,
  Number                   = {1-3},
  Volume                   = {37},

  Issue_date               = {May 2000},
  Publisher                = {Elsevier North-Holland, Inc.}
}

@Misc{hur-injective-anti-classical,
  Title                    = {Agda with excluded middle is inconsistent},

  Author                   = {Chung-Kil Hur},
  HowPublished             = {Email to Agda mailing list},
  Month                    = {January},
  Year                     = {2010},

  Owner                    = {rae},
  Timestamp                = {2016.06.16},
  Url                      = {https://lists.chalmers.se/pipermail/agda/2010/001526.html}
}

@InBook{simplification-girard-paradox,
  Title                    = {A simplification of {Girard's} paradox},
  Author                   = {Hurkens, Antonius J. C.},
  Editor                   = {Dezani-Ciancaglini, Mariangiola
and Plotkin, Gordon},
  Pages                    = {266--278},
  Publisher                = {Springer Berlin Heidelberg},
  Year                     = {1995},

  Address                  = {Berlin, Heidelberg},

  Booktitle                = {Typed Lambda Calculi and Applications: Second International Conference on Typed Lambda Calculi and Applications, TLCA '95 Edinburgh, United Kingdom, April 10--12, 1995 Proceedings},
  Doi                      = {10.1007/BFb0014058},
  ISBN                     = {978-3-540-49178-1},
  Url                      = {http://dx.doi.org/10.1007/BFb0014058}
}

@InProceedings{lambda-lifting,
  Title                    = {Lambda Lifting: Transforming Programs to Recursive Equations},
  Author                   = {Thomas Johnsson},
  Booktitle                = {Conference on Functional Programming Languages and Computer Architecture},
  Year                     = {1985},

  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@InProceedings{fundeps,
  Title                    = {Type Classes with Functional Dependencies},
  Author                   = {Mark P. Jones},
  Booktitle                = {European Symposium on Programming},
  Year                     = {2000},

  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@InProceedings{typing-haskell-in-haskell,
  Title                    = {Typing {H}askell in {H}askell},
  Author                   = {Mark P. Jones},
  Booktitle                = {Haskell Workshop},
  Year                     = {1999},

  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@InProceedings{named-instances,
  Title                    = {Named Instances for {H}askell Type Classes},
  Author                   = {Wolfram Kahl and Jan Scheffczyk},
  Booktitle                = {Proc. 2001 ACM SIGPLAN Workshop on Haskell},
  Year                     = {2001},
  Note                     = {See also:
 \textsf{http://ist.unibw-muenchen.de/Haskell/NamedInstances/}},
  Pages                    = {71--99},
  Publisher                = {ACM},
  Series                   = {Haskell '01},

  Location                 = {Firenze, Italy},
  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@InProceedings{kahrs-trss-are-un,
  Title                    = {{Non-Omega-Overlapping TRSs are UN}},
  Author                   = {Stefan Kahrs and Connor Smith},
  Booktitle                = {1st International Conference on Formal Structures for Computation and Deduction (FSCD 2016)},
  Year                     = {2016},

  Address                  = {Dagstuhl, Germany},
  Editor                   = {Delia Kesner and Brigitte Pientka},
  Pages                    = {22:1--22:17},
  Publisher                = {Schloss Dagstuhl--Leibniz-Zentrum fuer Informatik},
  Series                   = {Leibniz International Proceedings in Informatics (LIPIcs)},
  Volume                   = {52},

  Annote                   = {Keywords: consistency, omega-substitutions, uniqueness of normal forms},
  Doi                      = {http://dx.doi.org/10.4230/LIPIcs.FSCD.2016.22},
  ISBN                     = {978-3-95977-010-1},
  ISSN                     = {1868-8969},
  Url                      = {http://drops.dagstuhl.de/opus/volltexte/2016/5996},
  Urn                      = {urn:nbn:de:0030-drops-59968}
}

@InProceedings{gadts-meet-their-match,
  Title                    = {{GADTs} meet their match},
  Author                   = {Karachalias, Georgios and Schrijvers, Tom and Vytiniotis, Dimitrios and Peyton Jones, Simon},
  Booktitle                = {International Conference on Functional Programming},
  Year                     = {2015},
  Publisher                = {ACM},
  Series                   = {ICFP '15},

  Location                 = {Vancouver, British Columbia, Canada}
}

@inproceedings{kennedy-generics,
  author = {Andrew Kennedy and Don Syme},
  title = {Design and Implementation of Generics for the {.NET} {Common Language Runtime}},
  booktitle = {Programming Language Design and Implementation},
  year = {2001},
  month = {January},
  publisher = {ACM}
}

@PhdThesis{kennedy-thesis,
  Title                    = {Programming Languages and Dimensions},
  Author                   = {Andrew Kennedy},
  School                   = {University of Cambridge},
  Year                     = {1996},

  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@InProceedings{hlist,
  Title                    = {Strongly typed heterogeneous collections},
  Author                   = {Kiselyov, Oleg and L\"{a}mmel, Ralf and Schupke, Keean},
  Booktitle                = {Proc. 2004 ACM SIGPLAN Workshop on Haskell},
  Year                     = {2004},
  Pages                    = {96--107},
  Publisher                = {ACM},
  Series                   = {Haskell '04},

  Keywords                 = {collections, dependently typed programming, extensible records, haskell, type equality, type improvement, type-indexed rows, type-safe database access},
  Location                 = {Snowbird, Utah, USA},
  Numpages                 = {12},
  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@Article{kiselyov-capabilities,
  Title                    = {Lightweight Static Capabilities},
  Author                   = {Kiselyov, Oleg and Shan, Chung-chieh},
  Journal                  = {Electron. Notes Theor. Comput. Sci.},
  Year                     = {2007},

  Month                    = jun,
  Number                   = {7},
  Pages                    = {79--104},
  Volume                   = {174},

  Issue_date               = {June, 2007},
  Keywords                 = {Modular programming, safety property, static types, verification},
  Numpages                 = {26},
  Owner                    = {rae},
  Publisher                = {Elsevier Science Publishers B. V.},
  Timestamp                = {2015.05.08}
}

@InProceedings{syb-with-class,
  Title                    = {Scrap Your Boilerplate With Class: Extensible Generic Functions},
  Author                   = {Ralf L{\"a}mmel and Simon {Peyton Jones}},
  Booktitle                = {ICFP},
  Year                     = {2005},
  Publisher                = ACM,

  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@InProceedings{syb,
  Title                    = {Scrap Your Boilerplate: A Practical Design Pattern for Generic Programming},
  Author                   = {L\"{a}mmel, Ralf and Peyton Jones, Simon},
  Booktitle                = {Workshop on Types in Languages Design and Implementation},
  Year                     = {2003},
  Publisher                = {ACM}
}

@InProceedings{st-monad,
  Title                    = {Lazy Functional State Threads},
  Author                   = {Launchbury, John and Peyton Jones, Simon L.},
  Booktitle                = {Conference on Programming Language Design and Implementation},
  Year                     = {1994},
  Publisher                = {ACM},
  Series                   = {PLDI '94},

  Location                 = {Orlando, Florida, USA}
}

@InProceedings{mlf,
  Title                    = {$\mathrm{ML^F}$: Raising {ML} to the power of {System F}},
  Author                   = {Le Botlan, Didier and R\'{e}my, Didier},
  Booktitle                = {International Conference on Functional Programming},
  Year                     = {2003},
  Publisher                = {ACM},

  Owner                    = {rae},
  Timestamp                = {2015.06.24}
}

@InProceedings{leijen:haskelldb,
  Title                    = {Domain specific embedded compilers},
  Author                   = {Leijen, Daan and Meijer, Erik},
  Booktitle                = {Proc. 2nd conference on {Domain-Specific
 Languages}},
  Year                     = {1999},
  Pages                    = {109--122},
  Publisher                = {ACM},
  Series                   = {DSL '99},

  Location                 = {Austin, Texas, United States},
  Numpages                 = {14},
  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@InProceedings{implicit-params,
  Title                    = {Implicit parameters: dynamic scoping with static types},
  Author                   = {Lewis, Jeffrey R. and Launchbury, John and Meijer, Erik
 and Shields, Mark B.},
  Booktitle                = {Proc. 27th ACM SIGPLAN-SIGACT symposium on
 Principles of programming languages},
  Year                     = {2000},
  Pages                    = {108--118},
  Publisher                = {ACM},
  Series                   = {POPL '00},

  Location                 = {Boston, MA, USA},
  Numpages                 = {11},
  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@InProceedings{hasochism,
  Title                    = {Hasochism: the pleasure and pain of dependently typed {H}askell programming},
  Author                   = {Sam Lindley and Conor McBride},
  Booktitle                = {ACM SIGPLAN Haskell Symposium},
  Year                     = {2013},

  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@PhdThesis{luo-ecc,
  Title                    = {An Extended Calculus of Constructions},
  Author                   = {Luo, Zhaohui},
  School                   = {University of Edinburgh},
  Year                     = {1990},

  Owner                    = {rae},
  Timestamp                = {2016.06.28}
}

@Unpublished{generics-kind,
  Title                    = {The Right Kind of Generic Programming},
  Author                   = {Magalh\~aes, Jos\'e Pedro},
  Note                     = {To appear at WGP},
  Year                     = {2012},

  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@InProceedings{generic-deriving,
  Title                    = {A generic deriving mechanism for {Haskell}},
  Author                   = {Magalh\~aes, Jos\'e Pedro and Dijkstra, Atze and Jeuring, Johan and L\"{o}h, Andres},
  Booktitle                = {Proceedings of the 3rd ACM Haskell Symposium on Haskell},
  Year                     = {2010},
  Publisher                = {ACM},
  Series                   = {Haskell '10}
}

@Misc{haskell2010,
  author    = {Simon {Marlow (editor)}},
  title     = {Haskell 2010 Language Report},
  year      = {2010},
  owner     = {rae},
  timestamp = {2015.05.08},
}

@Misc{agda-curious,
  Title                    = {Agda-curious?},

  Author                   = {McBride, Conor},
  HowPublished             = {Keynote, ICFP'12},
  Year                     = {2012},

  Owner                    = {rae},
  Timestamp                = {2015.07.08}
}

@Misc{she,
  Title                    = {The {Strathclyde Haskell Enhancement}},

  Author                   = {McBride, Conor},
  HowPublished             = {\url{https://personal.cis.strath.ac.uk/conor.mcbride/pub/she/}},
  Year                     = {2011},

  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@Misc{epigram,
  Title                    = {Epigram},

  Author                   = {Conor McBride},
  Note                     = {\url{http://www.dur.ac.uk/CARG/epigram}},
  Year                     = {2004},

  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@Article{faking-it,
  Title                    = {Faking it: {S}imulating dependent types in {H}askell},
  Author                   = {McBride, Conor},
  Journal                  = {J. Funct. Program.},
  Year                     = {2002},

  Month                    = jul,
  Number                   = {5},
  Pages                    = {375--392},
  Volume                   = {12},

  Address                  = {New York, NY, USA},
  Issue_date               = {July 2002},
  Numpages                 = {18},
  Owner                    = {rae},
  Publisher                = {Cambridge University Press},
  Timestamp                = {2015.05.08}
}

@PhdThesis{mcbride-thesis,
  Title                    = {Dependently Typed Functional Programs and their Proofs},
  Author                   = {McBride, Conor},
  School                   = {University of Edinburgh},
  Year                     = {1999},

  Owner                    = {rae},
  Timestamp                = {2016.06.28},
  Url                      = {http://strictlypositive.org/thesis.pdf}
}

@InCollection{higher-rank,
  Title                    = {The typechecking of programs with implicit type structure},
  Author                   = {McCracken, Nancy},
  Booktitle                = {Semantics of Data Types},
  Publisher                = {Springer Berlin Heidelberg},
  Year                     = {1984},
  Editor                   = {Kahn, Gilles and MacQueen, David B. and Plotkin, Gordon},
  Series                   = {Lecture Notes in Computer Science},
  Volume                   = {173}
}

@Article{milner,
  Title                    = {{A Theory of Type Polymorphism in Programming}},
  Author                   = {Milner, Robin},
  Journal                  = {Journal of Computer and System Sciences},
  Year                     = {1978},
  Volume                   = {17}
}

@Book{sml97,
  Title                    = {The Definition of {Standard} {ML} (Revised)},
  Author                   = {Robin Milner and Mads Tofte and Robert Harper and
 David MacQueen},
  Publisher                = mit-press,
  Year                     = {1997},

  Address                  = cam-ma,

  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@InCollection{miquel-icc,
  Title                    = {The Implicit Calculus of Constructions: Extending Pure Type Systems with an Intersection Type Binder and Subtyping},
  Author                   = {Miquel, Alexandre},
  Booktitle                = {Typed Lambda Calculi and Applications},
  Publisher                = {Springer Berlin Heidelberg},
  Year                     = {2001},
  Editor                   = {Abramsky, Samson},
  Pages                    = {344-359},
  Series                   = {Lecture Notes in Computer Science},
  Volume                   = {2044}
}

@InProceedings{erasure-pure-type-systems,
  Title                    = {Erasure and Polymorphism in Pure Type Systems},
  Author                   = {Mishra-Linger, Nathan and Sheard, Tim},
  Booktitle                = {Foundations of Software Science and Computational Structures (FoSSaCS)},
  Year                     = {2008},
  Publisher                = {Springer},

  Owner                    = {rae},
  Timestamp                = {2016.06.28}
}

@InProceedings{singletons-everywhere,
  Title                    = {Singleton types here, singleton types there, singleton
 types everywhere},
  Author                   = {Monnier, Stefan and Haguenauer, David},
  Booktitle                = {Programming
 languages meets program verification},
  Year                     = {2010},
  Publisher                = {ACM},
  Series                   = {PLPV '10},

  Acmid                    = {1707792},
  Keywords                 = {certified compilation, dependent types, singleton types},
  Owner                    = {rae},
  Timestamp                = {2015.05.07}
}

@InProceedings{instance-chains,
  Title                    = {Instance chains: type class programming without overlapping instances},
  Author                   = {J. Garrett Morris and Mark P. Jones},
  Booktitle                = {ACM SIGPLAN International Conference on Functional Programming},
  Year                     = {2010},

  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@InProceedings{type-checking-units,
  Title                    = {Experience Report: Type-checking Polymorphic Units for Astrophysics Research in {H}askell},
  Author                   = {Takayuki Muranushi and Richard A. Eisenberg},
  Booktitle                = {ACM SIGPLAN Haskell Symposium},
  Year                     = {2014},

  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@InProceedings{higher-order-classes,
  Title                    = {Type classes with more higher-order polymorphism},
  Author                   = {Neubauer, Matthias and Thiemann, Peter},
  Booktitle                = {Proc. 7th ACM SIGPLAN International Conference on Functional Programming},
  Year                     = {2002},
  Pages                    = {179--190},
  Publisher                = {ACM},
  Series                   = {ICFP '02},

  Keywords                 = {Haskell, higher-order unification, type classes, type inference},
  Location                 = {Pittsburgh, PA, USA},
  Numpages                 = {12},
  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@PhdThesis{norell-thesis,
  Title                    = {Towards a practical programming language based on dependent type theory},
  Author                   = {Ulf Norell},
  School                   = {Department of Computer Science and Engineering, Chalmers
 University of Technology},
  Year                     = {2007},

  Address                  = {SE-412 96 G\"{o}teborg, Sweden},
  Month                    = {September},

  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@InProceedings{odersky-laufer,
  Title                    = {Putting Type Annotations to Work},
  Author                   = {Odersky, Martin and L\"{a}ufer, Konstantin},
  Booktitle                = {Symposium on Principles of Programming Languages},
  Year                     = {1996},
  Publisher                = {ACM},
  Series                   = {POPL '96}
}

@InProceedings{okasaki:square-matrices,
  Title                    = {From fast exponentiation to square matrices: an adventure
 in types},
  Author                   = {Okasaki, Chris},
  Booktitle                = {Proc. 4th ACM SIGPLAN {I}nternational
 {C}onference on Functional {P}rogramming},
  Year                     = {1999},
  Pages                    = {28--35},
  Publisher                = {ACM},
  Series                   = {ICFP '99},

  Location                 = {Paris, France},
  Numpages                 = {8},
  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@InProceedings{power-of-pi,
  Title                    = {The power of {P}i},
  Author                   = {Oury, Nicolas and Swierstra, Wouter},
  Booktitle                = {Proc. 13th ACM SIGPLAN international
 conference on Functional programming},
  Year                     = {2008},
  Pages                    = {39--50},
  Publisher                = {ACM},
  Series                   = {ICFP '08},

  Keywords                 = {dependent types, domain-specific embedded languages},
  Location                 = {Victoria, BC, Canada},
  Numpages                 = {12},
  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@Article{instant-insanity,
  Title                    = {Type-Level Instant Insanity},
  Author                   = {Parker, Conrad},
  Journal                  = {The Monad.Reader},
  Year                     = {2007},
  Number                   = {8},

  Owner                    = {rae},
  Timestamp                = {2015.05.27}
}

@Unpublished{scoped-type-variables,
  Title                    = {Lexically-scoped type variables},
  Author                   = {Peyton Jones, Simon and Shields, Mark},
  Note                     = {Draft},
  Year                     = {2004},

  Owner                    = {rae},
  Timestamp                = {2015.07.07},
  Url                      = {http://research.microsoft.com/en-us/um/people/simonpj/papers/scoped-tyvars/}
}

@InProceedings{rules,
  Title                    = {Playing by the rules: rewriting as a practical optimisation technique in {GHC}},
  Author                   = {{Peyton Jones}, Simon and Tolmach, Andrew and Hoare, Tony},
  Booktitle                = {Haskell Workshop},
  Year                     = {2001},
  Pages                    = {203--233},

  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@Article{practical-type-inference,
  Title                    = {Practical type inference for arbitrary-rank types},
  Author                   = {Peyton Jones, Simon and Dimitrios Vytiniotis and Stephanie Weirich and Mark Shields},
  Journal                  = {Journal of Functional Programming},
  Year                     = {2007},

  Month                    = jan,
  Number                   = {1},
  Volume                   = {17},

  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@InProceedings{gadt-type-inference,
  Title                    = {Simple unification-based type inference for {GADTs}},
  Author                   = {Peyton Jones, Simon and Vytiniotis, Dimitrios and Weirich,
 Stephanie and Washburn, Geoffrey},
  Booktitle                = {International
 Conference on Functional Programming},
  Year                     = {2006},
  Publisher                = {ACM},
  Series                   = {ICFP '06},

  Acmid                    = {1159811},
  Keywords                 = {generalized algebraic data types, type inference},
  Location                 = {Portland, Oregon, USA},
  Owner                    = {rae},
  Timestamp                = {2015.05.07}
}

@InCollection{typerep,
  Title                    = {A reflection on types},
  Author                   = {Peyton Jones, Simon and Weirich, Stephanie and Eisenberg, Richard A. and Vytiniotis, Dimitrios},
  Booktitle                = {A list of successes that can change the world},
  Publisher                = {Springer},
  Year                     = {2016},
  Note                     = {A festschrift in honor of Phil Wadler},
  Series                   = {LNCS},

  Owner                    = {rae},
  Timestamp                = {2016.06.28}
}

@Unpublished{static-semantics-for-haskell,
  Title                    = {A static semantics for {Haskell}},
  Author                   = {Peyton Jones, Simon L. and Wadler, Philip},
  Note                     = {Internal memo, Dept.~of Computing Science, Glasgow University},
  Year                     = {1991},

  Owner                    = {rae},
  Timestamp                = {2015.05.27}
}

@InProceedings{unboxed,
  Title                    = {Unboxed values as first class citizens},
  Author                   = {Simon {Peyton~Jones} and John Launchbury},
  Booktitle                = {FPCA},
  Year                     = {1991},
  Pages                    = {636-666},
  Publisher                = springer,
  Series                   = {LNCS},
  Volume                   = {523},

  Keywords                 = {arithmetic, transformation, deforestation, peyton jones},
  Owner                    = {rae},
  Timestamp                = {2015.05.08},
  Topic                    = {language design}
}

@Book{tapl,
  Title                    = {Types and Programming Languages},
  Author                   = {Pierce, Benjamin C.},
  Publisher                = {MIT Press},
  Year                     = {2002},

  Address                  = {Cambridge, MA},

  Owner                    = {rae},
  Timestamp                = {2016.06.28}
}

@Article{local-type-inference,
  Title                    = {Local Type Inference},
  Author                   = {Pierce, Benjamin C. and Turner, David N.},
  Journal                  = {ACM Trans. Program. Lang. Syst.},
  Year                     = {2000},

  Month                    = jan,
  Number                   = {1},
  Volume                   = {22},

  Publisher                = {ACM}
}

@InCollection{remy-attapl,
  author    = {Pottier, Fran\c{c}ois and R\'{e}my, Didier},
  booktitle = {Advanced Topics in Types and Programming Languages},
  publisher = {The MIT Press},
  title     = {{The Essence of ML Type Inference}},
  year      = {2005},
  editor    = {Benjamin C. Pierce},
  pages     = {387--489},
  owner     = {rae},
  timestamp = {2015.07.07},
}

@InProceedings{defunctionalization,
  Title                    = {Definitional Interpreters for Higher-Order Programming Languages},
  Author                   = {John Reynolds},
  Booktitle                = {ACM Annual Conference},
  Year                     = {1972},

  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@InCollection{reynolds-systemf,
  Title                    = {Towards a theory of type structure},
  Author                   = {Reynolds, John C.},
  Booktitle                = {Programming Symposium},
  Publisher                = {Springer Berlin Heidelberg},
  Year                     = {1974},
  Editor                   = {Robinet, B.},
  Pages                    = {408-425},
  Series                   = {Lecture Notes in Computer Science},
  Volume                   = {19},
}

@Article{russell-universes,
  Title                    = {Mathematical llogic as based on a theory of types},
  Author                   = {Russell, Bertrand},
  Journal                  = {Amer. J. Math.},
  Year                     = {1908},
  Pages                    = {222-262},
  Volume                   = {30},

  Owner                    = {rae},
  Timestamp                = {2016.06.28}
}

@InProceedings{sherer-gadts,
  Title                    = {{GADTs} meet subtyping},
  Author                   = {Gabriel Scherer and Didier R\'emy},
  Booktitle                = {ESOP},
  Year                     = {2013},
  Pages                    = {554--573},

  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@InProceedings{complete-gadt-type-inference,
  Title                    = {Complete and decidable type inference for {GADTs}},
  Author                   = {Schrijvers, Tom and Peyton Jones, Simon and Sulzmann,
 Martin and Vytiniotis, Dimitrios},
  Booktitle                = {Proc. 14th ACM SIGPLAN international
 conference on Functional programming},
  Year                     = {2009},
  Pages                    = {341--352},
  Publisher                = {ACM},
  Series                   = {ICFP '09},

  Keywords                 = {GADTs, Haskell, type inference},
  Location                 = {Edinburgh, Scotland},
  Numpages                 = {12},
  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@Article{ott,
  Title                    = {Ott: Effective tool support for the working semanticist},
  Author                   = {Peter Sewell and Francesco {Zappa Nardelli} and Scott Owens and Gilles Peskine and Thomas Ridge and Susmit Sarkar and Rok Strni\v{s}a},
  Journal                  = {Journal of Functional Programming},
  Year                     = {2010},

  Month                    = jan,
  Number                   = {1},
  Volume                   = {20},

  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@TechReport{sheard-gadts,
  Title                    = {{GADT}s + Extensible Kind System = Dependent Programming},
  Author                   = {Tim Sheard and James Hook and Nathan Linger},
  Institution              = {Portland State University},
  Year                     = {2005},
  Note                     = {{\tt http://www.cs.pdx.edu/\verb+~+sheard}},

  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@InProceedings{template-haskell,
  Title                    = {Template meta-programming for {H}askell},
  Author                   = {Sheard, Tim and Peyton Jones, Simon},
  Booktitle                = {Proc. 2002 ACM SIGPLAN workshop on Haskell},
  Year                     = {2002},
  Pages                    = {1--16},
  Publisher                = {ACM},
  Series                   = {Haskell '02},

  Keywords                 = {meta programming, templates},
  Location                 = {Pittsburgh, Pennsylvania},
  Numpages                 = {16},
  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@InProceedings{injective-type-families,
  Title                    = {Injective Type Families for {Haskell}},
  Author                   = {Stolarek, Jan and Peyon Jones, Simon and Eisenberg, Richard A.},
  Booktitle                = {Haskell Symposium},
  Year                     = {2015},
  Publisher                = {ACM},
  Series                   = {Haskell '15},

  Location                 = {Vancouver, BC, Canada},
  Owner                    = {rae},
  Timestamp                = {2015.05.27}
}

@InProceedings{system-fc,
  author    = {Sulzmann, Martin and Chakravarty, Manuel M. T. and {Peyton Jones}, Simon and Donnelly, Kevin},
  booktitle = {Types in languages design and implementation},
  title     = {System {F} with type equality coercions},
  year      = {2007},
  publisher = {ACM},
  series    = {TLDI '07},
  acmid     = {1190324},
  keywords  = {advanced type features, typed intermediate language},
  location  = {Nice, Nice, France},
  owner     = {rae},
  timestamp = {2015.05.07},
}

@Article{fundeps-chr,
  Title                    = {Understanding Functional Dependencies via Constraint Handling Rules},
  Author                   = {Sulzmann, Martin and Duck, Gregory J. and Peyton-Jones, Simon and Stuckey, Peter J.},
  Journal                  = {J. Funct. Program.},
  Year                     = {2007},

  Month                    = jan,
  Number                   = {1},
  Volume                   = {17},

  Issue_date               = {January 2007},
  Publisher                = {Cambridge University Press}
}

@InProceedings{f-star,
  Title                    = {Secure distributed programming with value-dependent
 types},
  Author                   = {Swamy, Nikhil and Chen, Juan and Fournet, C{\'e}dric and
 Strub, Pierre-Yves and Bhargavan, Karthikeyan and Yang,
 Jean},
  Booktitle                = {Proc. 16th ACM SIGPLAN International
 Conference on Functional Programming},
  Year                     = {2011},
  Pages                    = {266--278},
  Publisher                = {ACM},
  Series                   = {ICFP '11},

  Keywords                 = {refinement types, security types},
  Location                 = {Tokyo, Japan},
  Numpages                 = {13},
  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@Article{data-types-a-la-carte,
  Title                    = {Data types {\`a} la carte},
  Author                   = {Swierstra, Wouter},
  Journal                  = {J. Funct. Program.},
  Year                     = {2008},

  Month                    = jul,
  Number                   = {4},
  Pages                    = {423--436},
  Volume                   = {18},

  Acmid                    = {1394795},
  Address                  = {New York, NY, USA},
  Doi                      = {10.1017/S0956796808006758},
  ISSN                     = {0956-7968},
  Issue_date               = {July 2008},
  Numpages                 = {14},
  Owner                    = {rae},
  Publisher                = {Cambridge University Press},
  Timestamp                = {2015.05.08},
  Url                      = {http://dx.doi.org/10.1017/S0956796808006758}
}

@Unpublished{practical-erasure,
  Title                    = {Practical Erasure in Dependently Typed Languages},
  Author                   = {Teji\v{s}\v{c}\'{a}k, Mat\'{u}\v{s} and Brady, Edwin},
  Note                     = {Draft},
  Year                     = {2015},

  Owner                    = {rae},
  Timestamp                = {2015.05.28},
  Url                      = {http://eb.host.cs.st-andrews.ac.uk/drafts/dtp-erasure-draft.pdf}
}

@Article{impredicative-subtyping-undecidable,
  Title                    = {The Subtyping Problem for Second-Order Types is Undecidable},
  Author                   = {Jerzy Tiuryn and Pawel Urzyczyn},
  Journal                  = {Logic in Computer Science, Symposium on},
  Year                     = {1996},
  Pages                    = {74},
  Volume                   = {0},

  Address                  = {Los Alamitos, CA, USA},
  Doi                      = {http://doi.ieeecomputersociety.org/10.1109/LICS.1996.561306},
  ISSN                     = {1043-6871},
  Publisher                = {IEEE Computer Society}
}

@Book{hott,
  Title                    = {Homotopy Type Theory: Univalent Foundations of Mathematics},
  Author                   = {The {Univalent Foundations Program}},
  Publisher                = {\url{https://homotopytypetheory.org/book}},
  Year                     = {2013},

  Address                  = {Institute for Advanced Study}
}

@InProceedings{liquid-haskell,
  Title                    = {Refinement Types for {H}askell},
  Author                   = {Vazou, Niki and Seidel, Eric L. and Jhala, Ranjit and Vytiniotis, Dimitrios and Peyton Jones, Simon},
  Booktitle                = {International Conference on Functional Programming},
  Year                     = {2014},
  Publisher                = {ACM},
  Series                   = {ICFP '14},

  Acmid                    = {2628161},
  Location                 = {Gothenburg, Sweden},
  Owner                    = {rae},
  Timestamp                = {2015.05.07}
}

@InProceedings{coercion-optimization,
  Title                    = {{Evidence Normalization in System FC}},
  Author                   = {Vytiniotis, Dimitrios and Peyton Jones, Simon},
  Booktitle                = {24th International Conference on Rewriting Techniques and Applications (RTA 2013)},
  Year                     = {2013},

  Address                  = {Dagstuhl, Germany},
  Editor                   = {Femke van Raamsdonk},
  Pages                    = {20--38},
  Publisher                = {Schloss Dagstuhl--Leibniz-Zentrum fuer Informatik},
  Series                   = {Leibniz International Proceedings in Informatics (LIPIcs)},
  Volume                   = {21},

  Annote                   = {Keywords: Haskell, type functions, system FC},
  Doi                      = {http://dx.doi.org/10.4230/LIPIcs.RTA.2013.20},
  ISBN                     = {978-3-939897-53-8},
  ISSN                     = {1868-8969},
  Url                      = {http://drops.dagstuhl.de/opus/volltexte/2013/4050},
  Urn                      = {urn:nbn:de:0030-drops-40506}
}

@InProceedings{deferred-type-errors,
  Title                    = {Equality Proofs and Deferred Type Errors: A Compiler Pearl},
  Author                   = {Vytiniotis, Dimitrios and Peyton Jones, Simon and Magalh\~{a}es, Jos{\'e} Pedro},
  Booktitle                = {International Conference on Functional Programming},
  Year                     = {2012},
  Publisher                = {ACM},
  Series                   = {ICFP '12},

  Acmid                    = {2364554},
  Keywords                 = {deferred type errors, system fc, type equalities},
  Location                 = {Copenhagen, Denmark},
  Owner                    = {rae},
  Timestamp                = {2015.05.07}
}

@InProceedings{let-should-not-be-generalised,
  Title                    = {Let Should Not Be Generalized},
  Author                   = {Vytiniotis, Dimitrios and Peyton Jones, Simon and Schrijvers, Tom},
  Booktitle                = {Types in Language Design and Implementation},
  Year                     = {2010},
  Publisher                = {ACM},
  Series                   = {TLDI '10}
}

@Article{outsidein,
  Title                    = {\textsc{OutsideIn(X)}: {M}odular Type Inference with Local Assumptions},
  Author                   = {Dimitrios Vytiniotis and Simon {Peyton Jones} and Tom Schrijvers and Martin Sulzmann},
  Journal                  = {Journal of Functional Programming},
  Year                     = {2011},

  Month                    = sep,
  Number                   = {4-5},
  Volume                   = {21},

  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@InProceedings{boxy-types,
  Title                    = {Boxy Types: Inference for Higher-rank Types and Impredicativity},
  Author                   = {Vytiniotis, Dimitrios and Weirich, Stephanie and Peyton Jones, Simon},
  Booktitle                = {International Conference on Functional Programming},
  Year                     = {2006},
  Publisher                = {ACM},
  Series                   = {ICFP '06},

  Acmid                    = {1159838},
  Keywords                 = {higher-rank types, impredicativity, type inference},
  Location                 = {Portland, Oregon, USA},
  Owner                    = {rae},
  Timestamp                = {2015.05.07}
}

@TechReport{practical-types-appendix,
  Title                    = {Practical Type Inference for Arbitrary-Rank Types: Technical Appendix},
  Author                   = {Vytiniotis, Dimitrios and Weirich, Stephanie C. and Peyon Jones, Simon},
  Institution              = {University of Pennsylvania},
  Year                     = {2005},
  Number                   = {MS-CIS-05-14},

  Owner                    = {rae},
  Timestamp                = {2015.07.07},
  Url                      = {http://repository.upenn.edu/cis_reports/58/}
}

@InCollection{wadler-monads,
  Title                    = {Monads for functional programming},
  Author                   = {Wadler, Philip},
  Booktitle                = {Advanced Functional Programming},
  Publisher                = {Springer Berlin Heidelberg},
  Year                     = {1995},
  Editor                   = {Jeuring, Johan and Meijer, Erik},
  Pages                    = {24-52},
  Series                   = {Lecture Notes in Computer Science},
  Volume                   = {925},

  Doi                      = {10.1007/3-540-59451-5_2},
  ISBN                     = {978-3-540-59451-2},
  Language                 = {English},
  Url                      = {http://dx.doi.org/10.1007/3-540-59451-5_2}
}

@InCollection{wadler-pattern-matching,
  Title                    = {Compiling Pattern Matching},
  Author                   = {Wadler, Philip},
  Booktitle                = {The Implementation of Functional Programming Languages},
  Publisher                = {Prentice-Hall},
  Year                     = {1987},
  Editor                   = {Peyton Jones, Simon},

  Owner                    = {rae},
  Timestamp                = {2016.07.15}
}

@InProceedings{boxes-go-bananas,
  Title                    = {{Boxes Go Bananas}: Encoding Higher-order Abstract Syntax with Parametric Polymorphism},
  Author                   = {Washburn, Geoffrey and Weirich, Stephanie},
  Booktitle                = {International Conference on Functional Programming},
  Year                     = {2003},
  Publisher                = {ACM}
}

@Misc{weirich-icfp-keynote,
  Title                    = {Depending on Types},

  Author                   = {Weirich, Stephanie},
  HowPublished             = {Keynote address, ICFP'14},
  Year                     = {2014},

  Owner                    = {rae},
  Timestamp                = {2015.06.28}
}

@Misc{weirich-paradoxical-typecase,
  Title                    = {Paradoxical Typecase},

  Author                   = {Stephanie Weirich},
  HowPublished             = {Presentation to WG2.8.},
  Month                    = {November},
  Year                     = {2012},

  Owner                    = {rae},
  Timestamp                = {2016.06.16},
  Url                      = {http://www.cis.upenn.edu/~sweirich/talks/wg28-paradoxes.pdf}
}

@Article{weirich-cast,
  Title                    = {Type-Safe Cast: Functional Pearl},
  Author                   = {Stephanie Weirich},
  Journal                  = {J. Funct. Program.},
  Year                     = {2004},
  Number                   = {6},
  Pages                    = {681-695},
  Volume                   = {14},

  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@InProceedings{nokinds,
  author    = {Wei\-rich, Stephanie and Hsu, Justin and Eisenberg, Richard A.},
  title     = {System {FC} with Explicit Kind Equality},
  booktitle = {International Conference on Functional Programming},
  year      = {2013},
  series    = {ICFP '13},
  publisher = {ACM},
  acmid     = {2500599},
  keywords  = {dependent types, equality, haskell},
  location  = {Boston, Massachusetts, USA},
  owner     = {rae},
  timestamp = {2015.05.07},
}

@TechReport{nokinds-extended,
  author      = {Weirich, Stephanie and Hsu, Justin and Eisenberg, Richard A.},
  title       = {{System FC} with Explicit Kind Equality (Extended Version)},
  institution = {University of Pennsylvania},
  year        = {2013},
  owner       = {rae},
  timestamp   = {2015.05.07},
  url         = {http://www.cis.upenn.edu/~sweirich/nokinds-extended.pdf},
}

@InProceedings{partial-type-signatures,
  Title                    = {Partial Type Signatures for Haskell},
  Author                   = {Winant, Thomas and Devriese, Dominique and Piessens, Frank and Schrijvers, Tom},
  Booktitle                = {Practical Aspects of Declarative Languages},
  Year                     = {2014},
  Month                    = {January},
  Pages                    = {17--32},
  Publisher                = {Springer International Publishing},
  Volume                   = {8324}
}

@InProceedings{xi-gadt,
  Title                    = {Guarded recursive datatype constructors},
  Author                   = {Xi, Hongwei and Chen, Chiyan and Chen, Gang},
  Booktitle                = {Principles of Programming Languages},
  Year                     = {2003},
  Publisher                = {ACM},
  Series                   = {POPL '03},

  Acmid                    = {604150},
  Keywords                 = {guarded recursive datatype constructors},
  Location                 = {New Orleans, Louisiana, USA},
  Owner                    = {rae},
  Timestamp                = {2015.05.07}
}

@InProceedings{dml,
  Title                    = {Dependent types in practical programming},
  Author                   = {Xi, Hongwei and Pfenning, Frank},
  Booktitle                = {Proc. 26th ACM SIGPLAN-SIGACT symposium on
 Principles of programming languages},
  Year                     = {1999},
  Pages                    = {214--227},
  Publisher                = {ACM},
  Series                   = {POPL '99},

  Location                 = {San Antonio, Texas, United States},
  Numpages                 = {14},
  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@InProceedings{xi-array-bounds,
  Title                    = {Eliminating array bound checking through dependent types},
  Author                   = {Xi, Hongwei and Pfenning, Frank},
  Booktitle                = {Proc. ACM SIGPLAN 1998 conference on
 Programming language design and implementation},
  Year                     = {1998},
  Pages                    = {249--257},
  Publisher                = {ACM},
  Series                   = {PLDI '98},

  Location                 = {Montreal, Quebec, Canada},
  Numpages                 = {9},
  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@InProceedings{lightweight-ocaml-kinds,
  Title                    = {Lightweight Higher-kinded Polymorphism},
  Author                   = {Jeremy Yallop and Leo White},
  Booktitle                = {International Symposium on Functional and Logic Programming},
  Year                     = {2014},

  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@InProceedings{promotion,
  author    = {Yor\-gey, Brent A. and Weirich, Stephanie and Cretin, Julien and Peyton Jones, Simon and Vytiniotis, Dimitrios and Magalh\~{a}es, Jos{\'e} Pedro},
  title     = {Giving {H}askell a promotion},
  booktitle = {Types in Language Design and Implementation},
  year      = {2012},
  series    = {TLDI '12},
  publisher = {ACM},
  acmid     = {2103795},
  keywords  = {haskell, kinds, polymorphism, promotion},
  location  = {Philadelphia, Pennsylvania, USA},
  owner     = {rae},
  timestamp = {2015.05.07},
}

@Book{haskell98,
  Title                    = {Haskell 98 Language and Libraries: The Revised Report},
  Editor                   = {Simon {Peyton Jones}},
  Publisher                = {Cambridge University Press},
  Year                     = {2003},

  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@Proceedings{DBLP:conf/popl/2011,
  Title                    = {Proceedings of the 38th ACM SIGPLAN-SIGACT Symposium on
 Principles of Programming Languages, POPL 2011, Austin,
 TX, USA, January 26-28, 2011},
  Year                     = {2011},
  Publisher                = {ACM},

  Bibsource                = {DBLP, http://dblp.uni-trier.de},
  Booktitle                = {POPL},
  Ee                       = {http://dl.acm.org/citation.cfm?id=1926385},
  Owner                    = {rae},
  Timestamp                = {2015.05.07}
}

@Proceedings{DBLP:conf/popl/2005,
  Title                    = {Proceedings of the 32nd ACM SIGPLAN-SIGACT Symposium on
 Principles of Programming Languages, POPL 2005, Long Beach,
 California, USA, January 12-14, 2005},
  Year                     = {2005},
  Publisher                = {ACM},

  Bibsource                = {DBLP, http://dblp.uni-trier.de},
  Booktitle                = {POPL},
  Ee                       = {http://dl.acm.org/citation.cfm?id=1040305},
  Owner                    = {rae},
  Timestamp                = {2015.05.08}
}

@InProceedings{meertens-polymorphic-recursion,
  author    = {Meertens, Lambert},
  title     = {Incremental Polymorphic Type Checking in {B}},
  booktitle = {Proceedings of the 10th ACM SIGACT-SIGPLAN Symposium on Principles of Programming Languages},
  year      = {1983},
  series    = {POPL '83},
  publisher = {ACM},
  location  = {Austin, Texas},
}

@InBook{mycroft-polymorphic-recursion,
  title     = {Polymorphic type schemes and recursive definitions},
  publisher = {Springer},
  year      = {1984},
  author    = {Mycroft, Alan},
  editor    = {Paul, M. and Robinet, B.},
  address   = {Berlin, Heidelberg},
  booktitle = {International Symposium on Programming: 6th Colloquium Toulouse, April 17--19, 1984 Proceedings},
}

@Article{henglein-polymorphic-recursion,
  author     = {Henglein, Fritz},
  title      = {Type Inference with Polymorphic Recursion},
  journal    = {ACM Trans. Program. Lang. Syst.},
  year       = {1993},
  volume     = {15},
  number     = {2},
  pages      = {253--289},
  month      = apr,
  acmid      = {169692},
  address    = {New York, NY, USA},
  doi        = {10.1145/169701.169692},
  issn       = {0164-0925},
  issue_date = {April 1993},
  keywords   = {polymorphism, recursion, semiunification, type inference},
  numpages   = {37},
  publisher  = {ACM},
  url        = {http://doi.acm.org/10.1145/169701.169692},
}

@InProceedings{pattern-synonyms,
  author    = {Pickering, Matthew and \'Erdi, Gerg\H{o} and Peyton Jones, Simon and Eisenberg, Richard A.},
  title     = {Pattern Synonyms},
  booktitle = {ACM SIGPLAN Haskell Symposium},
  year      = {2016},
  publisher = {ACM},
}

@Unpublished{visible-type-application-extended,
  author = {Eisenberg, Richard A. and Weirich, Stephanie and Ahmed, Hamidhasan},
  title  = {Visible Type Application (Extended Version)},
  year   = {2016},
  url    = {http://www.cis.upenn.edu/~eir/papers/2016/type-app/visible-type-app-extended.pdf},
}

@InProceedings{monad-transformers,
  author    = {Liang, Sheng and Hudak, Paul and Jones, Mark},
  title     = {Monad Transformers and Modular Interpreters},
  booktitle = {Proceedings of the 22Nd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
  year      = {1995},
  series    = {POPL '95},
  publisher = {ACM},
  location  = {San Francisco, California, USA},
}

@InProceedings{diatchki-smt-plugin,
  author    = {Diatchki, Iavor S.},
  title     = {Improving Haskell Types with {SMT}},
  booktitle = {Proceedings of the 2015 ACM SIGPLAN Symposium on Haskell},
  year      = {2015},
  series    = {Haskell '15},
  publisher = {ACM},
  location  = {Vancouver, BC, Canada},
}

@InProceedings{keeping-neighbours-in-order,
  author    = {McBride, Conor Thomas},
  title     = {How to Keep Your Neighbours in Order},
  booktitle = {Proceedings of the 19th ACM SIGPLAN International Conference on Functional Programming},
  year      = {2014},
  series    = {ICFP '14},
  publisher = {ACM},
  location  = {Gothenburg, Sweden},
}

@Unpublished{nyc-hug-2014,
  author = {Eisenberg, Richard A.},
  title  = {Dependent Types in Haskell},
  note   = {Presentation to New York City Haskell Users' Group},
  month  = {Oct},
  year   = {2014},
  url    = {https://github.com/goldfirere/nyc-hug-oct2014},
}

@Unpublished{why-dependent-types-matter,
  author = {Altenkirch, Thorsten and McBride, Conor and McKinna, James},
  title  = {Why Dependent Types Matter},
  year   = {2005},
  url    = {http://www.strictlypositive.org/ydtm.ps.gz},
}

@Book{beginning-haskell,
  title     = {Beginning Haskell: A Project-Based Approach},
  publisher = {Apress},
  year      = {2013},
  author    = {Serrano Mena, Alejandro},
}

@Misc{idris-pretty-printer,
  author       = {Christiansen, David Raymond},
  title        = {A Pretty Printer that Says What it Means},
  howpublished = {Talk, Haskell Implementors Workshop, Vancouver, BC, Canada},
  year         = {2015},
  url          = {https://www.youtube.com/watch?v=m7BBCcIDXSg},
}

@InProceedings{idris-reflection,
  author    = {Christiansen, David Raymond},
  title     = {Type-Directed Elaboration of Quasiquotations: A High-Level Syntax for Low-Level Reflection},
  booktitle = {Proceedings of the 26Nd 2014 International Symposium on Implementation and Application of Functional Languages},
  year      = {2014},
  series    = {IFL '14},
  publisher = {ACM},
  location  = {Boston, MA, USA},
}

@InProceedings{bounded-refinement-types,
  author    = {Vazou, Niki and Bakst, Alexander and Jhala, Ranjit},
  title     = {Bounded Refinement Types},
  booktitle = {Proceedings of the 20th ACM SIGPLAN International Conference on Functional Programming},
  year      = {2015},
  series    = {ICFP 2015},
  publisher = {ACM},
  location  = {Vancouver, BC, Canada},
}

@InProceedings{liquid-haskell-experience,
  author    = {Vazou, Niki and Seidel, Eric L. and Jhala, Ranjit},
  title     = {{LiquidHaskell}: Experience with Refinement Types in the Real World},
  booktitle = {Proceedings of the 2014 ACM SIGPLAN Symposium on Haskell},
  year      = {2014},
  series    = {Haskell '14},
  publisher = {ACM},
  location  = {Gothenburg, Sweden},
}

@InProceedings{dafny,
  author    = {Leino, K. Rustan M.},
  title     = {Dafny: An Automatic Program Verifier for Functional Correctness},
  booktitle = {Logic for Programming, Artificial Intelligence, and Reasoning},
  year      = {2010},
  editor    = {Clarke, Edmund M. and Voronkov, Andrei},
  series    = {LPAR'16},
  pages     = {348--370},
  publisher = {Springer Berlin Heidelberg},
  location  = {Dakar, Senegal},
}

@InProceedings{dependent-f-star,
  author    = {Swamy, Nikhil and Hri\c{t}cu, C\u{a}t\u{a}lin and Keller, Chantal and Rastogi, Aseem and Delignat-Lavaud, Antoine and Forest, Simon and Bhargavan, Karthikeyan and Fournet, C{\'e}dric and Strub, Pierre-Yves and Kohlweiss, Markulf and Zinzindohoue, Jean-Karim and Zanella-B{\'e}guelin, Santiago},
  title     = {Dependent Types and Multi-monadic Effects in {F${}^\star$}},
  booktitle = {Proceedings of the 43rd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
  year      = {2016},
  series    = {POPL '16},
  publisher = {ACM},
  location  = {St. Petersburg, FL, USA},
}

@InProceedings{icc-star,
  author    = {Barras, Bruno and Bernardo, Bruno},
  title     = {The Implicit Calculus of Constructions as a Programming Language with Dependent Types},
  booktitle = {Foundations of Software Science and Computational Structures},
  year      = {2008},
  editor    = {Amadio, Roberto},
  series    = {FOSSACS 2008},
  pages     = {365--379},
  address   = {Budapest, Hungary},
  publisher = {Springer Berlin Heidelberg},
}

@InProceedings{combining-proofs-and-programs,
  author    = {Casinghino, Chris and Sj\"{o}berg, Vilhelm and Weirich, Stephanie},
  title     = {Combining Proofs and Programs in a Dependently Typed Language},
  booktitle = {Proceedings of the 41st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
  year      = {2014},
  series    = {POPL '14},
  publisher = {ACM},
  location  = {San Diego, California, USA},
}

@InProceedings{programming-up-to-congruence,
  author    = {Sj\"{o}berg, Vilhelm and Weirich, Stephanie},
  title     = {Programming Up to Congruence},
  booktitle = {Proceedings of the 42Nd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
  year      = {2015},
  series    = {POPL '15},
  publisher = {ACM},
  location  = {Mumbai, India},
}

@PhdThesis{xi-thesis,
  author = {Xi, Hongwei},
  title  = {Dependent Types in Practical Programming},
  school = {Carnegie Mellon University},
  year   = {1998},
}

@inproceedings{anf,
 author = {Flanagan, Cormac and Sabry, Amr and Duba, Bruce F. and Felleisen, Matthias},
 title = {The Essence of Compiling with Continuations},
 booktitle = {Proceedings of the ACM SIGPLAN 1993 Conference on Programming Language Design and Implementation},
 series = {PLDI '93},
 year = {1993},
 location = {Albuquerque, New Mexico, USA},
 pages = {237--247},
 numpages = {11},
 publisher = {ACM},
} 


@article{grossman-cyclone,
 author = {Grossman, Dan},
 title = {Quantified Types in an Imperative Language},
 journal = {ACM Trans. Program. Lang. Syst.},
 issue_date = {May 2006},
 volume = {28},
 number = {3},
 month = may,
 year = {2006},
 pages = {429--475},
 publisher = {ACM},
} 

@InProceedings{cyclone,
  author    = {Trevor Jim and Greg Morrisett and Dan Grossman and Michael Hicks and James Cheney and Yanling Wang},
  title     = {Cyclone: A safe dialect of {C}},
  booktitle = {Proceedings of the {USENIX} Annual Technical Conference},
  year      = {2002},
  pages     = {275-288},
}

@PhdThesis{eisenberg-thesis,
  author = {Richard A. Eisenberg},
  title  = {Dependent Types in Haskell: Theory and Practice},
  school = {University of Pennsylvania},
  year   = {2016},
}

@Book{java-generics,
  title     = {Java Generics and Collections: Speed Up the Java Development Process},
  publisher = {O'Reilly Media},
  year      = {2006},
  author    = {Maurice Naftalin and Philip Wadler},
}

@Book{real-world-ocaml,
  title     = {Real World OCaml},
  publisher = {O'Reilly Media},
  year      = {2013},
  author    = {Yaron Minsky and Anil Madhavapeddy and Jason Hickey},
}

@InProceedings{lookup-update-infir,
  author    = {Diehl, Larry and Sheard, Tim},
  title     = {Generic Lookup and Update for Infinitary Inductive-recursive Types},
  booktitle = {Proceedings of the 1st International Workshop on Type-Driven Development},
  year      = {2016},
  series    = {TyDe 2016},
  publisher = {ACM},
  location  = {Nara, Japan},
}

@TechReport{cardelli-type-in-type,
  author      = {Cardelli, Luca},
  title       = {A Polymorphic $\lambda$-calculus with {Type:Type}},
  institution = {DEC/Compaq Systems Research Center},
  year        = {1986},
  note        = {Research report 10},
}

@InProceedings{levity-polymorphism,
  author    = {Eisenberg, Richard A. and Peyton Jones, Simon},
  title     = {Levity Polymorphism},
  booktitle = {Proceedings of the 38th ACM SIGPLAN Conference on Programming Language Design and Implementation},
  year      = {2017},
  series    = {PLDI 2017},
  pages     = {525--539},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {3062357},
  doi       = {10.1145/3062341.3062357},
  isbn      = {978-1-4503-4988-8},
  keywords  = {compilation, polymorphism, unboxed types},
  location  = {Barcelona, Spain},
  numpages  = {15},
  url       = {http://doi.acm.org/10.1145/3062341.3062357},
}

@TechReport{levity-polymorphism-extended,
  author      = {Eisenberg, Richard A. and Peyton Jones, Simon},
  title       = {Levity Polymorphism (extended version)},
  institution = {Bryn Mawr College},
  year        = {2017},
  url         = {http://cs.brynmawr.edu/~rae/papers/2017/levity/levity-extended.pdf}
}

@Article{constraint-based-gadt,
  author     = {Simonet, Vincent and Pottier, Fran\c{c}ois},
  title      = {A Constraint-based Approach to Guarded Algebraic Data Types},
  journal    = {ACM Trans. Program. Lang. Syst.},
  year       = {2007},
  volume     = {29},
  number     = {1},
  month      = jan,
  issue_date = {January 2007},
  publisher  = {ACM},
}

@InProceedings{ghc-transforming-optimizer,
  author    = {Peyton Jones, Simon and Santos, Andr\'e},
  booktitle = {Science of Computer Programming},
  title     = {A transformation-based optimiser for {Haskell}},
  year      = {1997},
  month     = {October},
  pages     = {3-47},
  publisher = {Elsevier},
  volume    = {32},
  abstract  = {Many compilers do some of their work by means of correctness-preserving, and hopefully performance-improving, program transformations. The Glasgow Haskell Compiler (GHC) takes this idea of "compilation by transformation" as its war-cry, trying to express as much as possible of the compilation process in the form of program transformations.

This paper reports on our practical experience of the transformational approach to compilation, in the context of a substantial compiler.},
}

@Misc{mlton,
  author       = {Weeks, Stephen},
  title        = {Whole-Program Compilation in {MLton}},
  howpublished = {Invited talk at ML Workshop},
  month        = sep,
  year         = {2006},
}

@InProceedings{til,
  author    = {Tarditi, David and Morrisett, Greg and Cheng, Perry and Stone, Chris and Harper, Robert and Lee, Peter},
  title     = {{TIL}: A Type-Directed Optimizing Compiler for {ML}},
  booktitle = {Proceedings of the ACM SIGPLAN '96 Conference on Programming Language Design and Implementation},
  year      = {1996},
  series    = {PLDI '96},
  location  = {Philadelphia, PA, USA},
}

@InProceedings{lx,
  author    = {Crary, Karl and Weirich, Stephanie},
  title     = {Flexible Type Analysis},
  booktitle = {Proceedings of the Fourth ACM SIGPLAN International Conference on Functional Programming},
  year      = {1999},
  series    = {ICFP '99},
  pages     = {233--248},
  publisher = {ACM},
  acmid     = {317906},
  location  = {Paris, France},
  numpages  = {16},
}

@Article{tal,
  author     = {Morrisett, Greg and Walker, David and Crary, Karl and Glew, Neal},
  title      = {From {System F} to Typed Assembly Language},
  journal    = {ACM Trans. Program. Lang. Syst.},
  year       = {1999},
  volume     = {21},
  number     = {3},
  pages      = {527--568},
  month      = may,
  issue_date = {May 1999},
  keywords   = {certified code, closure conversion, secure extensible systems, type-directed compilation, typed assembly language, typed intermediate languages},
  numpages   = {42},
  publisher  = {ACM},
}

@InProceedings{talt,
  author    = {Crary, Karl},
  title     = {Toward a Foundational Typed Assembly Language},
  booktitle = {Proceedings of the 30th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
  year      = {2003},
  series    = {POPL '03},
  pages     = {198--212},
  publisher = {ACM},
  keywords  = {proof-carrying code, typed assembly language},
  location  = {New Orleans, Louisiana, USA},
  numpages  = {15},
}

@InProceedings{evaluation-order-polymorphism,
  author    = {Dunfield, Jana},
  title     = {Elaborating Evaluation-order Polymorphism},
  booktitle = {Proceedings of the 20th ACM SIGPLAN International Conference on Functional Programming},
  year      = {2015},
  series    = {ICFP 2015},
  pages     = {256--268},
  publisher = {ACM},
  keywords  = {evaluation order, intersection types, polymorphism},
  location  = {Vancouver, BC, Canada},
  numpages  = {13},
}

@Article{pitts-nominal-logic,
  author   = {Andrew M. Pitts},
  title    = {Nominal logic, a first order theory of names and binding},
  journal  = {Information and Computation},
  year     = {2003},
  volume   = {186},
  number   = {2},
  pages    = {165 - 193},
  issn     = {0890-5401},
  note     = {Theoretical Aspects of Computer Software (TACS 2001)},
  doi      = {https://doi.org/10.1016/S0890-5401(03)00138-X},
  keywords = {Abstract syntax, Variable binding, Permutation, Fresh names},
  url      = {http://www.sciencedirect.com/science/article/pii/S089054010300138X},
}

@InProceedings{gordon-locally-nameless,
  author    = {Gordon, Andrew D.},
  title     = {A mechanisation of name-carrying syntax up to alpha-conversion},
  booktitle = {Higher Order Logic Theorem Proving and Its Applications},
  year      = {1994},
  editor    = {Joyce, Jeffrey J. and Seger, Carl-Johan H.},
  pages     = {413--425},
  address   = {Berlin, Heidelberg},
  publisher = {Springer Berlin Heidelberg},
  abstract  = {We present a new strategy for representing syntax in a, mechanised logic. We define an underlying type of de Bruijn terms, define an operation of named lambda-abstraction, and hence inductively define a set of conventional name-carrying terms. The result is a mechanisation of the practice of most authors studying formal calculi: to work with conventional name-carrying notation and substitution, but to identify terms up to alpha-conversion. This strategy falls between most previous works, which either treat bound variable names literally or dispense with them altogether. The theory has been implemented in the Cambridge HOL system and used in an experimental application.},
  isbn      = {978-3-540-48346-5},
}

@InProceedings{hoas,
  author    = {Pfenning, Frank and Elliott, Conal},
  title     = {Higher-order Abstract Syntax},
  booktitle = {Proceedings of the ACM SIGPLAN 1988 Conference on Programming Language Design and Implementation},
  year      = {1988},
  series    = {PLDI '88},
  pages     = {199--208},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {54010},
  doi       = {10.1145/53990.54010},
  isbn      = {0-89791-269-1},
  location  = {Atlanta, Georgia, USA},
  numpages  = {10},
  url       = {http://doi.acm.org/10.1145/53990.54010},
}

@InProceedings{phoas,
  author    = {Chlipala, Adam},
  title     = {Parametric Higher-order Abstract Syntax for Mechanized Semantics},
  booktitle = {Proceedings of the 13th ACM SIGPLAN International Conference on Functional Programming},
  year      = {2008},
  series    = {ICFP '08},
  pages     = {143--156},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {1411226},
  doi       = {10.1145/1411204.1411226},
  isbn      = {978-1-59593-919-7},
  keywords  = {compiler verification, dependent types, interactive proof assistants, type-theoretic semantics},
  location  = {Victoria, BC, Canada},
  numpages  = {14},
  url       = {http://doi.acm.org/10.1145/1411204.1411226},
}

@InProceedings{implementing-typeful-program-transformations,
  author    = {Chen, Chiyan and Xi, Hongwei},
  title     = {Implementing Typeful Program Transformations},
  booktitle = {Proceedings of the 2003 ACM SIGPLAN Workshop on Partial Evaluation and Semantics-based Program Manipulation},
  year      = {2003},
  series    = {PEPM '03},
  pages     = {20--28},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {777392},
  doi       = {10.1145/777388.777392},
  isbn      = {1-58113-667-6},
  keywords  = {CPS, DML, continuation-passing style, dependent ML, dependent types, typeful program transformation},
  location  = {San Diego, California, USA},
  numpages  = {9},
  url       = {http://doi.acm.org/10.1145/777388.777392},
}

@Unpublished{well-typed-interpreter,
  author = {Augustsson, Lennart and Carlsson, Magnus},
  title  = {An exercise in dependent types: A well-typed interpreter},
  note   = {Unpublished manuscript},
  year   = {1999},
  url    = {http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.39.2895&rep=rep1&type=pdf},
}

@InProceedings{ats,
  author    = {Xi, Hongwei},
  title     = {Applied Type System},
  booktitle = {Types for Proofs and Programs},
  year      = {2004},
  editor    = {Berardi, Stefano and Coppo, Mario and Damiani, Ferruccio},
  pages     = {394--408},
  address   = {Berlin, Heidelberg},
  publisher = {Springer Berlin Heidelberg},
  isbn      = {978-3-540-24849-1},
}

@InProceedings{binders-unbound,
  author    = {Weirich, Stephanie and Yorgey, Brent A. and Sheard, Tim},
  title     = {Binders Unbound},
  booktitle = {Proceedings of the 16th ACM SIGPLAN International Conference on Functional Programming},
  year      = {2011},
  series    = {ICFP '11},
  pages     = {333--345},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {2034818},
  doi       = {10.1145/2034773.2034818},
  isbn      = {978-1-4503-0865-6},
  keywords  = {generic programming, haskell, name binding, patterns},
  location  = {Tokyo, Japan},
  numpages  = {13},
  url       = {http://doi.acm.org/10.1145/2034773.2034818},
}

@Misc{hair-shirt,
  author       = {Peyton Jones, Simon},
  title        = {Wearing the Hair Shirt: A Retrospective on {H}askell},
  howpublished = {Invited talk at POPL},
  year         = {2003},
}

@InCollection{mtl,
  author    = {Jones, Mark P.},
  title     = {Functional Programming with Overloading and Higher-Order Polymorphism},
  booktitle = {Advanced Functional Programming},
  publisher = {Springer Verlag},
  year      = {1995},
  editor    = {Jeuring, Johan and Meijer, Erik},
  volume    = {925},
  series    = {LNCS},
}

@TechReport{parsec,
  author      = {Leijen, Daan},
  title       = {Parsec: a fast combinator parser},
  institution = {University of Utrecht},
  year        = {2001},
  number      = {UU-CS-2001-26},
}

@InProceedings{principal-type-inference-for-gadts,
  author    = {Chen, Sheng and Erwig, Martin},
  title     = {Principal Type Inference for GADTs},
  booktitle = {Proceedings of the 43rd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
  year      = {2016},
  series    = {POPL '16},
  pages     = {416--428},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {2837665},
  doi       = {10.1145/2837614.2837665},
  isbn      = {978-1-4503-3549-2},
  keywords  = {Choice Type, GADT, Type Inference, Type Reconciliation, Variational Unification},
  location  = {St. Petersburg, FL, USA},
  numpages  = {13},
  url       = {http://doi.acm.org/10.1145/2837614.2837665},
}

@InProceedings{quantified-constraints,
  author    = {Bottu, Gert-Jan and Karachalias, Georgios and Schrijvers, Tom and Oliveira, Bruno C. d. S. and Wadler, Philip},
  title     = {Quantified Class Constraints},
  booktitle = {Proceedings of the 10th ACM SIGPLAN International Symposium on Haskell},
  year      = {2017},
  series    = {Haskell 2017},
  pages     = {148--161},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {3122967},
  doi       = {10.1145/3122955.3122967},
  isbn      = {978-1-4503-5182-9},
  keywords  = {Haskell, type classes, type inference},
  location  = {Oxford, UK},
  numpages  = {14},
  url       = {http://doi.acm.org/10.1145/3122955.3122967},
}

@InProceedings{rewrite-rules,
  author    = {Peyton Jones, Simon and Tolmach, Andrew and Hoare, Tony},
  title     = {Playing by the Rules: Rewriting as a practical optimisation technique in {GHC}},
  booktitle = {Proceedings of the Haskell Workshop},
  year      = {2001},
}

@InProceedings{path-dependent-types,
  author    = {Amin, Nada and Rompf, Tiark and Odersky, Martin},
  title     = {Foundations of Path-dependent Types},
  booktitle = {Proceedings of the 2014 ACM International Conference on Object Oriented Programming Systems Languages \& Applications},
  year      = {2014},
  series    = {OOPSLA '14},
  pages     = {233--249},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {2660216},
  doi       = {10.1145/2660193.2660216},
  isbn      = {978-1-4503-2585-1},
  keywords  = {calculus, dependent types, objects},
  location  = {Portland, Oregon, USA},
  numpages  = {17},
  url       = {http://doi.acm.org.proxy.brynmawr.edu/10.1145/2660193.2660216},
}

@InProceedings{tagless-staged-interpreters,
  author    = {Pa\v{s}ali\'{c}, Emir and Taha, Walid and Sheard, Tim},
  title     = {Tagless Staged Interpreters for Typed Languages},
  booktitle = {Proceedings of the Seventh ACM SIGPLAN International Conference on Functional Programming},
  year      = {2002},
  series    = {ICFP '02},
  pages     = {218--229},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {581499},
  doi       = {10.1145/581478.581499},
  isbn      = {1-58113-487-8},
  keywords  = {calculus of constructions, definitional interpreters, domain-specific languages, multi-stage programming},
  location  = {Pittsburgh, PA, USA},
  numpages  = {12},
  url       = {http://doi.acm.org/10.1145/581478.581499},
}

@InCollection{taha-tag-elimination,
  author    = {Taha, Walid and Makholm, Henning and Hughes, John},
  title     = {Tag elimination and {J}ones-optimality},
  booktitle = {Programs as Data Objects},
  publisher = {Springer Verlag},
  year      = {2001},
  editor    = {Danvy, Olivier and Filinski, Andrzej},
  volume    = {2053},
  series    = {LNCS},
}

@InCollection{wadler-prettier-printer,
  author    = {Wadler, Philip},
  title     = {A Prettier Printer},
  booktitle = {The Fun of Programming: Essays in Honor of Richard Bird},
  publisher = {Palgrave},
  year      = {2003},
  editor    = {Gibbons, Jeremy and De Moor, Oege},
}

@TechReport{wobbly-types,
  author      = {Peyton Jones, Simon and Washburn, Geoffrey and Weirich, Stephanie},
  title       = {Wobbly types: type inference for generalised algebraic data types},
  institution = {University of Pennsylvania},
  year        = {2004},
  number      = {MS-CIS-05-26},
}

@InProceedings{jones-improvement,
  author    = {Jones, Mark P.},
  title     = {Simplifying and Improving Qualified Types},
  booktitle = {Proceedings of the Seventh International Conference on Functional Programming Languages and Computer Architecture},
  year      = {1995},
  series    = {FPCA '95},
  publisher = {ACM},
  location  = {La Jolla, California, USA},
}

@InProceedings{key-monad,
  author    = {Ploeg, Atze van der and Claessen, Koen and Buiras, Pablo},
  title     = {The Key Monad: Type-safe Unconstrained Dynamic Typing},
  booktitle = {Proceedings of the 9th International Symposium on Haskell},
  year      = {2016},
  series    = {Haskell 2016},
  address   = {New York, NY, USA},
  publisher = {ACM},
  keywords  = {Arrow notation, Functional programming, Haskell, Higher-order state, Parametric HOAS, ST monad},
  location  = {Nara, Japan},
}

@InProceedings{z3-arrays,
  author    = {Leonardo {de Moura} and Nikolaj Bj{\o}rner},
  title     = {Generalized, efficient array decision procedures},
  booktitle = {2009 Formal Methods in Computer-Aided Design},
  year      = {2009},
  pages     = {45-52},
  month     = {Nov},
  keywords  = {decision theory;formal logic;theorem proving;SMT solver Z3;basic array theory;combinatory array logic;efficient array decision procedure;hardware verification;satisfiability modulo theory;software verification;symbolic analysis;Arithmetic;Automata;Constraint theory;Delay;Equations;Filters;Formal verification;Hardware;Logic arrays;Surface-mount technology},
}

@InCollection{mccarthy-arrays,
  author    = {John McCarthy},
  title     = {Towards a mathematical science of computation},
  booktitle = {IFIP Congress},
  year      = {1962},
  pages     = {21-28},
}

@InProceedings{stump-arrays,
  author    = {Aaron Stump and Clark W. Barrett and David L. Dill and Jeremy Levitt},
  title     = {A decision procedure for an extensional theory of arrays},
  booktitle = {Proceedings 16th Annual IEEE Symposium on Logic in Computer Science},
  year      = {2001},
  pages     = {29-37},
  doi       = {10.1109/LICS.2001.932480},
  issn      = {1043-6871},
  keywords  = {arrays;data structures;decidability;formal verification;program diagnostics;theorem proving;array theory;automated theorem proving;correctness proof;decision procedure;extensional theory;formal verification;program analysis;Application software;Design automation;Equations;Formal verification;Laboratories;Libraries;Logic arrays},
}


@InProceedings{z3,
author={de Moura, Leonardo and Bj{\o}rner, Nikolaj},
editor={Ramakrishnan, C. R. and Rehof, Jakob},
title={{Z3}: An Efficient {SMT} Solver},
booktitle="Tools and Algorithms for the Construction and Analysis of Systems",
year="2008",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="337--340",
abstract="Satisfiability Modulo Theories (SMT) problem is a decision problem for logical first order formulas with respect to combinations of background theories such as: arithmetic, bit-vectors, arrays, and uninterpreted functions. Z3 is a new and efficient SMT Solver freely available from Microsoft Research. It is used in various software verification and analysis applications.",
isbn="978-3-540-78800-3"
}

@Unpublished{le-singletons3,
  author = {Le, Justin},
  title  = {Introduction to Singletons},
  year   = {2018},
  url    = {https://blog.jle.im/entry/introduction-to-singletons-3.html},
}

@Misc{kmett-bound,
  author       = {Kmett, Edward},
  title        = {\textsf{bound}},
  howpublished = {Haskell package},
  year         = {2012},
  url          = {https://github.com/ekmett/bound/},
}

@Misc{lhs2TeX,
  author       = {L\"oh, Andres},
  title        = {{\textsf{lhs2TeX}}},
  howpublished = {Haskell package},
  year         = {2012},
  url          = {https://www.andres-loeh.de/lhs2tex/},
}

@Misc{ghc-type-level-nats,
  author       = {Diatchki, Iavor},
  title        = {Type-level literals},
  howpublished = {GHC User's Manual},
  year         = {2014},
  url          = {https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#type-level-literals},
}

@Misc{ishii-dependent-types-in-haskell,
  author       = {Ishii, Hiromi},
  title        = {Dependent Types in Haskell},
  howpublished = {School of Haskell blog},
  year         = {2014},
  url          = {https://www.schoolofhaskell.com/user/konn/prove-your-haskell-for-great-safety/dependent-types-in-haskell},
}

@Article{benton-strongly-typed-term-representations-in-coq,
  author   = {Benton, Nick and Hur, Chung-Kil and Kennedy, Andrew J. and McBride, Conor},
  title    = {Strongly Typed Term Representations in {Coq}},
  journal  = {Journal of Automated Reasoning},
  year     = {2012},
  volume   = {49},
  number   = {2},
  pages    = {141--159},
  month    = {Aug},
  issn     = {1573-0670},
  abstract = {There are two approaches to formalizing the syntax of typed object languages in a proof assistant or programming language. The extrinsic approach is to first define a type that encodes untyped object expressions and then make a separate definition of typing judgements over the untyped terms. The intrinsic approach is to make a single definition that captures well-typed object expressions, so ill-typed expressions cannot even be expressed. Intrinsic encodings are attractive and naturally enforce the requirement that metalanguage operations on object expressions, such as substitution, respect object types. The price is that the metalanguage types of intrinsic encodings and operations involve non-trivial dependency, adding significant complexity. This paper describes intrinsic-style formalizations of both simply-typed and polymorphic languages, and basic syntactic operations thereon, in the Coq proof assistant. The Coq types encoding object-level variables (de Bruijn indices) and terms are indexed by both type and typing environment. One key construction is the boot-strapping of definitions and lemmas about the action of substitutions in terms of similar ones for a simpler notion of renamings. In the simply-typed case, this yields definitions that are free of any use of type equality coercions. In the polymorphic case, some substitution operations do still require type coercions, which we at least partially tame by uniform use of heterogeneous equality.},
  day      = {01},
  doi      = {10.1007/s10817-011-9219-0},
  url      = {https://doi.org/10.1007/s10817-011-9219-0},
}

@Misc{idris-well-typed-interpreter,
  author       = {{The Idris Team}},
  title        = {Example: The Well-Typed Interpreter},
  howpublished = {The Idris Tutorial},
  year         = {2017},
  url          = {http://docs.idris-lang.org/en/latest/tutorial/interp.html},
}

@InProceedings{pfenning-leap,
  author    = {Pfenning, Frank and Lee, Peter},
  title     = {{LEAP:} A language with eval and polymorphism},
  booktitle = {TAPSOFT '89},
  year      = {1989},
  editor    = {D{\'i}az, J. and Orejas, F.},
  pages     = {345--359},
  address   = {Berlin, Heidelberg},
  publisher = {Springer Berlin Heidelberg},
  abstract  = {We describe the core of a new strongly-typed functional programming language called LEAP, a ``Language with Eval And Polymorphism.'' Pure LEAP is an extension of the $\omega$-order polymorphic $\lambda$-calculus (F$\omega$) by global definitions that allows the representation of programs and the definition of versions of reify, reflect, and eval for all of (F$\omega$). Pure LEAP is therefore highly reflexive and strongly typed. We believe that Pure LEAP can be extended to a practical and efficient metalanguage in the ML tradition. At present we are experimenting with a prototype implementation of Pure LEAP.},
  isbn      = {978-3-540-46118-0},
}

@Misc{proposal-no-cusks,
  author       = {Eisenberg, Richard A.},
  title        = {Top-level kind signatures},
  howpublished = {A GHC Proposal},
  year         = {2017},
  url          = {https://github.com/ghc-proposals/ghc-proposals/blob/master/proposals/0036-kind-signatures.rst},
}

@Misc{proposal-no-star,
  author       = {Vladislav Zavialov},
  title        = {Remove the \texttt{*} kind syntax},
  howpublished = {A GHC Proposal},
  year         = {2018},
  url          = {https://github.com/ghc-proposals/ghc-proposals/blob/master/proposals/0030-remove-star-kind.rst},
}

@InProceedings{type-and-scope-safe,
  author    = {Allais, Guillaume and Chapman, James and McBride, Conor and McKinna, James},
  title     = {Type-and-scope Safe Programs and Their Proofs},
  booktitle = {Proceedings of the 6th ACM SIGPLAN Conference on Certified Programs and Proofs},
  year      = {2017},
  series    = {CPP 2017},
  pages     = {195--207},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {3018613},
  doi       = {10.1145/3018610.3018613},
  isbn      = {978-1-4503-4705-1},
  keywords  = {Agda, Generic Programming, Lambda-calculus, Mechanized Meta-Theory, Normalisation by Evaluation, Semantics},
  location  = {Paris, France},
  numpages  = {13},
  url       = {http://doi.acm.org/10.1145/3018610.3018613},
}

@Article{scope-safe-universes,
  author     = {Allais, Guillaume and Atkey, Robert and Chapman, James and McBride, Conor and McKinna, James},
  title      = {A Type and Scope Safe Universe of Syntaxes with Binding: Their Semantics and Proofs},
  journal    = {Proc. ACM Program. Lang.},
  year       = {2018},
  volume     = {2},
  number     = {ICFP},
  pages      = {90:1--90:30},
  month      = jul,
  issn       = {2475-1421},
  acmid      = {3236785},
  address    = {New York, NY, USA},
  articleno  = {90},
  doi        = {10.1145/3236785},
  issue_date = {September 2018},
  keywords   = {Agda, Fusion, Generic Programming, Logical Relations, Semantics, Simulation, Syntax with Binding},
  numpages   = {30},
  publisher  = {ACM},
  url        = {http://doi.acm.org/10.1145/3236785},
}

@MastersThesis{typed-holes,
  author = {Gissurarson, Matth{\'\i}as P\'all},
  title  = {Suggesting Valid Hole Fits for Typed-Holes in {Haskell}},
  school = {Chalmers University of Technology, University of Gothenburg},
  year   = {2018},
  url    = {https://mpg.is/papers/gissurarson2018suggesting-msc.pdf},
}

@Misc{weirich-influence-of-dependent-types,
  author       = {Weirich, Stephanie},
  title        = {The Influence of Dependent Types},
  howpublished = {Keynote, POPL '17},
  year         = {2017},
  url          = {https://www.youtube.com/watch?v=rflCw9bT4_0},
}

@Article{weirich-spec-dth,
  author     = {Weirich, Stephanie and Voizard, Antoine and de Amorim, Pedro Henrique Azevedo and Eisenberg, Richard A.},
  title      = {A Specification for Dependent Types in Haskell},
  journal    = {Proc. ACM Program. Lang.},
  year       = {2017},
  volume     = {1},
  number     = {ICFP},
  pages      = {31:1--31:29},
  month      = aug,
  issn       = {2475-1421},
  acmid      = {3110275},
  address    = {New York, NY, USA},
  articleno  = {31},
  doi        = {10.1145/3110275},
  issue_date = {September 2017},
  keywords   = {Dependent Types, Haskell},
  numpages   = {29},
  publisher  = {ACM},
  url        = {http://doi.acm.org/10.1145/3110275},
}

@Conference{xie-coercion-quantification,
  author    = {Xie, Ningning and Eisenberg, Richard A.},
  title     = {Coercion Quantification},
  booktitle = {Haskell Implementors' Workshop},
  year      = {2018},
}

@InProceedings{view-patterns,
  author    = {Wadler, Philip},
  title     = {Views: A Way for Pattern Matching to Cohabit with Data Abstraction},
  booktitle = {Proceedings of the 14th ACM SIGACT-SIGPLAN Symposium on Principles of Programming Languages},
  year      = {1987},
  series    = {POPL ’87},
  pages     = {307–313},
  address   = {New York, NY, USA},
  publisher = {Association for Computing Machinery},
  doi       = {10.1145/41625.41653},
  isbn      = {0897912152},
  location  = {Munich, West Germany},
  numpages  = {7},
  url       = {https://doi.org/10.1145/41625.41653},
}

@InProceedings{constraint-kinds,
  author    = {Orchard, Dominic and Schrijvers, Tom},
  title     = {Haskell Type Constraints Unleashed},
  booktitle = {Functional and Logic Programming},
  year      = {2010},
  editor    = {Blume, Matthias and Kobayashi, Naoki and Vidal, Germ{\'a}n},
  pages     = {56--71},
  address   = {Berlin, Heidelberg},
  publisher = {Springer Berlin Heidelberg},
  abstract  = {The popular Glasgow Haskell Compiler extends the Haskell 98 type system with several powerful features, leading to an expressive language of type terms. In contrast, constraints over types have received much less attention, creating an imbalance in the expressivity of the type system. In this paper, we rectify the imbalance, transferring familiar type-level constructs, synonyms and families, to the language of constraints, providing a symmetrical set of features at the type-level and constraint-level. We introduce constraint synonyms and constraint families, and illustrate their increased expressivity for improving the utility of polymorphic EDSLs in Haskell, amongst other examples. We provide a discussion of the semantics of the new features relative to existing type system features and similar proposals, including details of termination.},
  isbn      = {978-3-642-12251-4},
}

@InProceedings{safe-haskell,
  author    = {Terei, David and Marlow, Simon and Peyton Jones, Simon and Mazi\`{e}res, David},
  title     = {Safe {Haskell}},
  booktitle = {Proceedings of the 2012 Haskell Symposium},
  year      = {2012},
  series    = {Haskell ’12},
  pages     = {137–148},
  address   = {New York, NY, USA},
  publisher = {Association for Computing Machinery},
  doi       = {10.1145/2364506.2364524},
  isbn      = {9781450315746},
  keywords  = {haskell, security, type safety},
  location  = {Copenhagen, Denmark},
  numpages  = {12},
  url       = {https://doi.org/10.1145/2364506.2364524},
}

@InProceedings{pattern-guards,
  author    = {Erwig, Martin and Peyton Jones, Simon},
  title     = {Pattern Guards and Transformational Patterns},
  booktitle = {Haskell Workshop 2000},
  year      = {2000},
  month     = {September},
  abstract  = {We propose three extensions to patterns and pattern matching in Haskell. The first, pattern guards, allows the guards of a guarded equation to match patterns and bind variables, as well as to test boolean condition. For this we introduce a natural generalization of guard expressions to guard qualifiers.

A frequently-occurring special case is that a function should be applied to a matched value, and the result of this is to be matched against another pattern. For this we introduce a syntactic abbreviation, transformational patterns, that is particularly useful when dealing with views. These proposals can be implemented with very modest syntactic and implementation cost. They are upward compatible with Haskell; all existing programs will continue to work.

We also offer a third, much more speculative proposal, which provides the transformational-pattern construct with additional power to explicitly catch pattern match failure.

We demonstrate the usefulness of the proposed extension by several examples, in particular, we compare our proposal with views, and we also discuss the use of the new patterns in combination with equational reasoning.

&nbsp;},
  edition   = {Haskell Workshop 2000},
  url       = {https://www.microsoft.com/en-us/research/publication/pattern-guards-and-transformational-patterns/},
}

@InProceedings{type-classes-design,
  author    = {Peyton Jones, Simon and Jones, Mark and Meijer, Erik},
  title     = {Type classes: an exploration of the design space},
  booktitle = {Haskell Workshop},
  year      = {1997},
  editor    = {Launchbury, John},
  address   = {Amsterdam, Netherlands},
}

@InProceedings{guarded-impredicativity,
  author    = {Serrano, Alejandro and Hage, Jurriaan and Vytiniotis, Dimitrios and Peyton Jones, Simon},
  title     = {Guarded Impredicative Polymorphism},
  booktitle = {Proceedings of the 39th ACM SIGPLAN Conference on Programming Language Design and Implementation},
  year      = {2018},
  series    = {PLDI 2018},
  pages     = {783–796},
  address   = {New York, NY, USA},
  publisher = {Association for Computing Machinery},
  doi       = {10.1145/3192366.3192389},
  isbn      = {9781450356985},
  keywords  = {constraint-based inference, Type systems, impredicative polymorphism},
  location  = {Philadelphia, PA, USA},
  numpages  = {14},
  url       = {https://doi.org/10.1145/3192366.3192389},
}

@Article{wadler-plfa,
  author   = {Wen Kokke and Jeremy G. Siek and Philip Wadler},
  title    = {Programming Language Foundations in Agda},
  journal  = {Science of Computer Programming},
  year     = {2020},
  volume   = {194},
  pages    = {102440},
  issn     = {0167-6423},
  abstract = {One of the leading textbooks for formal methods is Software Foundations (SF), written by Benjamin Pierce in collaboration with others, and based on Coq. After five years using SF in the classroom, we came to the conclusion that Coq is not the best vehicle for this purpose, as too much of the course needs to focus on learning tactics for proof derivation, to the cost of learning programming language theory. Accordingly, we have written a new textbook, Programming Language Foundations in Agda (PLFA). PLFA covers much of the same ground as SF, although it is not a slavish imitation. What did we learn from writing PLFA? First, that it is possible. One might expect that without proof tactics that the proofs become too long, but in fact proofs in PLFA are about the same length as those in SF. Proofs in Coq require an interactive environment to be understood, while proofs in Agda can be read on the page. Second, that constructive proofs of preservation and progress give immediate rise to a prototype evaluator. This fact is obvious in retrospect but it is not exploited in SF (which instead provides a separate normalise tactic) nor can we find it in the literature. Third, that using extrinsically-typed terms is far less perspicuous than using intrinsically-typed terms. SF uses the former presentation, while PLFA presents both; the former uses about 1.6 as many lines of Agda code as the latter, roughly the golden ratio. The textbook is written as a literate Agda script, and can be found here: http://plfa.inf.ed.ac.uk},
  doi      = {https://doi.org/10.1016/j.scico.2020.102440},
  keywords = {Agda, Coq, Lambda calculus, Dependent types},
  url      = {http://www.sciencedirect.com/science/article/pii/S0167642320300502},
}

@InProceedings{montagu-existential-modules,
  author    = {Montagu, Beno\^{\i}t and R\'{e}my, Didier},
  booktitle = {Proceedings of the 36th Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
  title     = {Modeling Abstract Types in Modules with Open Existential Types},
  year      = {2009},
  address   = {New York, NY, USA},
  pages     = {354–365},
  publisher = {Association for Computing Machinery},
  series    = {POPL '09},
  abstract  = {We propose F-zip, a calculus of open existential types that is an extension of System F obtained by decomposing the introduction and elimination of existential types into more atomic constructs. Open existential types model modular type abstraction as done in module systems. The static semantics of F-zip adapts standard techniques to deal with linearity of typing contexts, its dynamic semantics is a small-step reduction semantics that performs extrusion of type abstraction as needed during reduction, and the two are related by subject reduction and progress lemmas. Applying the Curry-Howard isomorphism, F-zip can be also read back as a logic with the same expressive power as second-order logic but with more modular ways of assembling partial proofs. We also extend the core calculus to handle the double vision problem as well as type-level and term-level recursion. The resulting language turns out to be a new formalization of (a minor variant of) Dreyer's internal language for recursive and mixin modules.},
  doi       = {10.1145/1480881.1480926},
  isbn      = {9781605583792},
  keywords  = {lambda-calculus, type systems, linear type systems, existential types, modularity, generativity, modules, abstract types},
  location  = {Savannah, GA, USA},
  numpages  = {12},
  url       = {https://doi.org/10.1145/1480881.1480926},
}

@Article{weirich-role-dth,
  author     = {Weirich, Stephanie and Choudhury, Pritam and Voizard, Antoine and Eisenberg, Richard A.},
  journal    = {Proc. ACM Program. Lang.},
  title      = {A Role for Dependent Types in Haskell},
  year       = {2019},
  month      = jul,
  number     = {ICFP},
  volume     = {3},
  abstract   = {Modern Haskell supports zero-cost coercions, a mechanism where types that share the same run-time representation may be freely converted between. To make sure such conversions are safe and desirable, this feature relies on a mechanism of roles to prohibit invalid coercions. In this work, we show how to incorporate roles into dependent types systems and prove, using the Coq proof assistant, that the resulting system is sound. We have designed this work as a foundation for the addition of dependent types to the Glasgow Haskell Compiler, but we also expect that it will be of use to designers of other dependently-typed languages who might want to adopt Haskell’s safe coercions feature.},
  address    = {New York, NY, USA},
  articleno  = {101},
  doi        = {10.1145/3341705},
  issue_date = {August 2019},
  keywords   = {Haskell, Dependent Types},
  numpages   = {29},
  publisher  = {Association for Computing Machinery},
  url        = {https://doi.org/10.1145/3341705},
}

@Article{graded-dependent-types,
  author     = {Choudhury, Pritam and Eades III, Harley and Eisenberg, Richard A. and Weirich, Stephanie},
  journal    = {Proc. ACM Program. Lang.},
  title      = {A Graded Dependent Type System with a Usage-Aware Semantics},
  year       = {2021},
  month      = jan,
  number     = {POPL},
  volume     = {5},
  abstract   = {Graded Type Theory provides a mechanism to track and reason about resource usage in type systems. In this paper, we develop GraD, a novel version of such a graded dependent type system that includes functions, tensor products, additive sums, and a unit type. Since standard operational semantics is resource-agnostic, we develop a heap-based operational semantics and prove a soundness theorem that shows correct accounting of resource usage. Several useful properties, including the standard type soundness theorem, non-interference of irrelevant resources in computation and single pointer property for linear resources, can be derived from this theorem. We hope that our work will provide a base for integrating linearity, irrelevance and dependent types in practical programming languages like Haskell.},
  address    = {New York, NY, USA},
  articleno  = {50},
  doi        = {10.1145/3434331},
  issue_date = {January 2021},
  keywords   = {heap semantics, quantitative reasoning, Irrelevance, linearity},
  numpages   = {32},
  publisher  = {Association for Computing Machinery},
  url        = {https://doi.org/10.1145/3434331},
}

@Article{quick-look,
  author     = {Serrano, Alejandro and Hage, Jurriaan and Peyton Jones, Simon and Vytiniotis, Dimitrios},
  journal    = {Proc. ACM Program. Lang.},
  title      = {A Quick Look at Impredicativity},
  year       = {2020},
  month      = aug,
  number     = {ICFP},
  volume     = {4},
  abstract   = {Type inference for parametric polymorphism is wildly successful, but has always suffered from an embarrassing flaw: polymorphic types are themselves not first class. We present Quick Look, a practical, implemented, and deployable design for impredicative type inference. To demonstrate our claims, we have modified GHC, a production-quality Haskell compiler, to support impredicativity. The changes required are modest, localised, and are fully compatible with GHC's myriad other type system extensions.},
  address    = {New York, NY, USA},
  articleno  = {89},
  doi        = {10.1145/3408971},
  issue_date = {August 2020},
  keywords   = {impredicative polymorphism, constraint-based inference, Type systems},
  numpages   = {29},
  publisher  = {Association for Computing Machinery},
  url        = {https://doi.org/10.1145/3408971},
}

@Unpublished{stability,
  author = {{Anonymous ICFP Author(s)}},
  note   = {Submitted to ICFP'21.},
  title  = {Seeking Stability by being Lazy and Shallow: Lazy and shallow instantiation is user friendly},
  year   = {2021}
}

@InProceedings{stitch,
  author    = {Eisenberg, Richard A.},
  booktitle = {Proceedings of the 13th ACM SIGPLAN International Symposium on Haskell},
  title     = {Stitch: The Sound Type-Indexed Type Checker (Functional Pearl)},
  year      = {2020},
  address   = {New York, NY, USA},
  pages     = {39–53},
  publisher = {Association for Computing Machinery},
  series    = {Haskell 2020},
  abstract  = {A classic example of the power of generalized algebraic datatypes (GADTs) to verify a delicate implementation is the type-indexed expression AST. This functional pearl refreshes this example, casting it in modern Haskell using many of GHC's bells and whistles. The Stitch interpreter is a full executable interpreter, with a parser, type checker, common-subexpression elimination, and a REPL. Making heavy use of GADTs and type indices, the Stitch implementation is clean Haskell code and serves as an existence proof that Haskell's type system is advanced enough for the use of fancy types in a practical setting. The paper focuses on guiding the reader through these advanced topics, enabling them to adopt the techniques demonstrated here.},
  doi       = {10.1145/3406088.3409015},
  isbn      = {9781450380508},
  keywords  = {Haskell, fancy types, GADTs},
  location  = {Virtual Event, USA},
  numpages  = {15},
  url       = {https://doi.org/10.1145/3406088.3409015},
}

@Book{term-rewriting,
  author    = {Baader, Franz and Nipkow, Tobias},
  publisher = {Cambridge University Press},
  title     = {Term Rewriting and All That},
  year      = {1998},
}

@Article{type-classes-with-existentials,
  author    = {L\"aufer, Konstantin},
  journal   = {Journal of Functional Programming},
  title     = {Type classes with existential types},
  year      = {1996},
  number    = {3},
  pages     = {485–518},
  volume    = {6},
  doi       = {10.1017/S0956796800001817},
  publisher = {Cambridge University Press},
}

@InProceedings{jones-qualified-types,
  author    = {Jones, Mark P.},
  booktitle = {Proceedings of the 4th European Symposium on Programming},
  title     = {A Theory of Qualified Types},
  year      = {1992},
  address   = {Berlin, Heidelberg},
  pages     = {287–306},
  publisher = {Springer-Verlag},
  series    = {ESOP '92},
  isbn      = {3540552537},
  numpages  = {20},
}


@PhdThesis{atze:phd,
  author =       {Atze Dijkstra},
  title =        {Stepping through Haskell},
  school =       {Universiteit Utrecht},
  year =         2005}

@InProceedings{rossberg:1ml,
  author    = {Rossberg, Andreas},
  booktitle = {Proceedings of the 20th ACM SIGPLAN International Conference on Functional Programming},
  title     = {1ML – Core and Modules United (F-Ing First-Class Modules)},
  year      = {2015},
  address   = {New York, NY, USA},
  pages     = {35–47},
  publisher = {Association for Computing Machinery},
  series    = {ICFP 2015},
  abstract  = {ML is two languages in one: there is the core, with types and expressions, and there are modules, with signatures, structures and functors. Modules form a separate, higher-order functional language on top of the core. There are both practical and technical reasons for this stratification; yet, it creates substantial duplication in syntax and semantics, and it reduces expressiveness. For example, selecting a module cannot be made a dynamic decision. Language extensions allowing modules to be packaged up as first-class values have been proposed and implemented in different variations. However, they remedy expressiveness only to some extent, are syntactically cumbersome, and do not alleviate redundancy. We propose a redesign of ML in which modules are truly first-class values, and core and module layer are unified into one language. In this "1ML", functions, functors, and even type constructors are one and the same construct; likewise, no distinction is made between structures, records, or tuples. Or viewed the other way round, everything is just ("a mode of use of") modules. Yet, 1ML does not require dependent types, and its type structure is expressible in terms of plain System Fω, in a minor variation of our F-ing modules approach. We introduce both an explicitly typed version of 1ML, and an extension with Damas/Milner-style implicit quantification. Type inference for this language is not complete, but, we argue, not substantially worse than for Standard ML. An alternative view is that 1ML is a user-friendly surface syntax for System Fω that allows combining term and type abstraction in a more compositional manner than the bare calculus.},
  doi       = {10.1145/2784731.2784738},
  isbn      = {9781450336697},
  keywords  = {first-class modules, ML modules, type systems, abstract data types, elaboration, System F, existential types},
  location  = {Vancouver, BC, Canada},
  numpages  = {13},
  url       = {https://doi.org/10.1145/2784731.2784738},
}

@InProceedings{crary:popl17,
  author    = {Crary, Karl},
  booktitle = {Proceedings of the 44th ACM SIGPLAN Symposium on Principles of Programming Languages},
  title     = {Modules, Abstraction, and Parametric Polymorphism},
  year      = {2017},
  address   = {New York, NY, USA},
  pages     = {100–113},
  publisher = {Association for Computing Machinery},
  series    = {POPL 2017},
  abstract  = {Reynolds's Abstraction theorem forms the mathematical foundation for data abstraction. His setting was the polymorphic lambda calculus. Today, many modern languages, such as the ML family, employ rich module systems designed to give more expressive support for data abstraction than the polymorphic lambda calculus, but analogues of the Abstraction theorem for such module systems have lagged far behind.  We give an account of the Abstraction theorem for a modern module calculus supporting generative and applicative functors, higher-order functors, sealing, and translucent signatures. The main issues to be overcome are: (1) the fact that modules combine both types and terms, so they must be treated as both simultaneously, (2) the effect discipline that models the distinction between transparent and opaque modules, and (3) a very rich language of type constructors supporting singleton kinds. We define logical equivalence for modules and show that it coincides with contextual equivalence. This substantiates the folk theorem that modules are good for data abstraction. All our proofs are formalized in Coq.},
  doi       = {10.1145/3009837.3009892},
  isbn      = {9781450346603},
  keywords  = {logical relations, Abstraction, modules, parametricity},
  location  = {Paris, France},
  numpages  = {14},
  url       = {https://doi.org/10.1145/3009837.3009892},
}



@InProceedings{nakazawa08,
author="Nakazawa, Koji
and Tatsuta, Makoto
and Kameyama, Yukiyoshi
and Nakano, Hiroshi",
editor="Kaminski, Michael
and Martini, Simone",
title="Undecidability of Type-Checking in Domain-Free Typed Lambda-Calculi with Existence",
booktitle="Computer Science Logic",
year="2008",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="478--492",
abstract="This paper shows undecidability of type-checking and type-inference problems in domain-free typed lambda-calculi with existential types: a negation and conjunction fragment, and an implicational fragment. These are proved by reducing type-checking and type-inference problems of the domain-free polymorphic typed lambda-calculus to those of the lambda-calculi with existential types by continuation passing style translations.",
isbn="978-3-540-87531-4"
}


@inproceedings{nakazawa09,
author = {Nakazawa, Koji and Tatsuta, Makoto},
title = {Type Checking and Inference for Polymorphic and Existential Types},
year = {2009},
isbn = {9781920682750},
publisher = {Australian Computer Society, Inc.},
address = {AUS},
abstract = {This paper proves undecidability of type checking and type inference problems in some variants of typed lambda calculi with polymorphic and existential types. First, type inference in the domain-free polymorphic lambda calculus is proved to be undecidable, and then it is proved that type inference is undecidable in the negation, conjunction, and existence fragment of the domain-free typed lambda calculus. Secondly, their variants with multiple quantifier rules are introduced, and their type checking and type inference are proved to be undecidable. Finally, it is proved that we can reduce undecidability of type checking and type inference problems in the Curry-style lambda calculus in negation, conjunction, and existential fragment to undecidability of those problems in another variant of the domain-free polymorphic lambda calculus.},
booktitle = {Proceedings of the Fifteenth Australasian Symposium on Computing: The Australasian Theory - Volume 94},
pages = {63–72},
numpages = {10},
keywords = {type checking, polymorphic type, domain-free style, type inference, existential type},
location = {Wellington, New Zealand},
series = {CATS '09}
}

@InProceedings{pfenning-anti-unification,
  author    = {F. Pfenning},
  booktitle = {Proceedings 1991 Sixth Annual IEEE Symposium on Logic in Computer Science},
  title     = {Unification and anti-unification in the calculus of constructions},
  year      = {1991},
  address   = {Los Alamitos, CA, USA},
  month     = {jul},
  pages     = {74,75,76,77,78,79,80,81,82,83,84,85},
  publisher = {IEEE Computer Society},
  doi       = {10.1109/LICS.1991.151632},
  keywords  = {calculus;computer science;internet;logic programming;computer languages;terminology;artificial intelligence},
  url       = {https://doi.ieeecomputersociety.org/10.1109/LICS.1991.151632},
}

@Unpublished{formulae-as-types,
  author = {Howard, William Alvin},
  note   = {Dedicated to H. B. Curry on the occasion of his 80th birthday},
  title  = {The Formulae-as-types Notion of Construction},
  year   = {1969},
  url    = {https://www.dcc.fc.up.pt/~acm/howard2.pdf},
}

@InProceedings{type-variables-in-patterns,
  author    = {Eisenberg, Richard A. and Breitner, Joachim and Peyton Jones, Simon},
  booktitle = {Proceedings of the 11th ACM SIGPLAN International Symposium on Haskell},
  title     = {Type Variables in Patterns},
  year      = {2018},
  address   = {New York, NY, USA},
  pages     = {94–105},
  publisher = {Association for Computing Machinery},
  series    = {Haskell 2018},
  abstract  = {For many years, GHC has implemented an extension to Haskell that allows type variables to be bound in type signatures and patterns, and to scope over terms. This extension was never properly specified. We rectify that oversight here. With the formal specification in hand, the otherwise-labyrinthine path toward a design for binding type variables in patterns becomes blindingly clear. We thus extend ScopedTypeVariables to bind type variables explicitly, obviating the Proxy workaround to the dustbin of history.},
  doi       = {10.1145/3242744.3242753},
  isbn      = {9781450358354},
  keywords  = {type variables, polymorphism, Patterns, Haskell},
  location  = {St. Louis, MO, USA},
  numpages  = {12},
  url       = {https://doi.org/10.1145/3242744.3242753},
}
@Manual{augustsson:93,
  title =     {Haskell B. user's manual. Version 0.999.4},
  author =    {Lennart Augustsson},
  year =      1993}

@InCollection{martin-lof,
  author    = {Martin-L{\"o}f, Per},
  booktitle = {Studies in Logic and the Foundations of Mathematics},
  publisher = {Elsevier},
  title     = {An intuitionistic theory of types: Predicative part},
  year      = {1975},
  pages     = {73--118},
  volume    = {80},
}

@Manual{haskell-b,
  title  = {Haskell B. user's manual},
  author = {Augustsson, Lennart},
  year   = {1994},
  url    = {https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.50.5800&rep=rep1&type=pdf},
}

@InCollection{harper:attapl,
  author    = {Harper, Robert and Pierce, Benjamin C.},
  booktitle = {Advanced Topics in Types and Programming Languages},
  publisher = {The MIT Press},
  title     = {Design Considerations for ML-Style Module Systems},
  year      = {2005},
  editor    = {Pierce, Benjamin C.},
  pages     = {293--346},
}

@Misc{weirich-dependent-regexes,
  author       = {Weirich, Stephanie},
  howpublished = {Haskell eXchange keynote},
  title        = {Dependent Types in Haskell},
  year         = {2018},
}

@Article{subtypes-for-specifications,
  author  = {J. {Rushby} and S. {Owre} and N. {Shankar}},
  journal = {IEEE Transactions on Software Engineering},
  title   = {Subtypes for specifications: predicate subtyping in PVS},
  year    = {1998},
  number  = {9},
  pages   = {709-720},
  volume  = {24},
  doi     = {10.1109/32.713327},
}

@Comment{jabref-meta: databaseType:bibtex;}

@Comment{jabref-meta: grouping:
0 AllEntriesGroup:;
1 StaticGroup:Markings\;2\;1\;\;\;\;;
2 StaticGroup:rae:6\;2\;1\;\;\;\;;
}
